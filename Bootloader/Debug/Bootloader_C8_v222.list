
Bootloader_C8_v222.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  080031f4  080031f4  000041f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003400  08003400  0000506c  2**0
                  CONTENTS
  4 .ARM          00000000  08003400  08003400  0000506c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003400  08003400  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003400  08003400  00004400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003404  08003404  00004404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003408  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000070  08003474  00005070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08003474  00005294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b8a  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a61  00000000  00000000  0000cc1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0000e680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000621  00000000  00000000  0000ee88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b88  00000000  00000000  0000f4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ac2  00000000  00000000  00027031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008428b  00000000  00000000  00030af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4d7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026dc  00000000  00000000  000b4dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000b74a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080031dc 	.word	0x080031dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080031dc 	.word	0x080031dc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fcc0 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f824 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8b2 	bl	80002c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f85c 	bl	8000218 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f884 	bl	800026c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Bootloader v%d:%d Started!!!\n", BL_Version[0], BL_Version[1]);
 8000164:	4b0b      	ldr	r3, [pc, #44]	@ (8000194 <main+0x48>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	4619      	mov	r1, r3
 800016a:	4b0a      	ldr	r3, [pc, #40]	@ (8000194 <main+0x48>)
 800016c:	785b      	ldrb	r3, [r3, #1]
 800016e:	461a      	mov	r2, r3
 8000170:	4809      	ldr	r0, [pc, #36]	@ (8000198 <main+0x4c>)
 8000172:	f002 f95d 	bl	8002430 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Firmware_Update();
 8000176:	f000 f9cb 	bl	8000510 <Firmware_Update>

  // Jump to application
  goto_application();
 800017a:	f000 fac7 	bl	800070c <goto_application>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800017e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000182:	4806      	ldr	r0, [pc, #24]	@ (800019c <main+0x50>)
 8000184:	f001 f9ac 	bl	80014e0 <HAL_GPIO_TogglePin>
	 	  	  	  		  HAL_Delay(1000);
 8000188:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800018c:	f000 fd04 	bl	8000b98 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000190:	bf00      	nop
 8000192:	e7f4      	b.n	800017e <main+0x32>
 8000194:	20000000 	.word	0x20000000
 8000198:	080031f4 	.word	0x080031f4
 800019c:	40011000 	.word	0x40011000

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b090      	sub	sp, #64	@ 0x40
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	2228      	movs	r2, #40	@ 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 fa86 	bl	80026c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]
 80001c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c2:	2302      	movs	r3, #2
 80001c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c6:	2301      	movs	r3, #1
 80001c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ca:	2310      	movs	r3, #16
 80001cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ce:	2300      	movs	r3, #0
 80001d0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 f99c 	bl	8001514 <HAL_RCC_OscConfig>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001e2:	f000 fac3 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e6:	230f      	movs	r3, #15
 80001e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fc0a 	bl	8001a18 <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800020a:	f000 faaf 	bl	800076c <Error_Handler>
  }
}
 800020e:	bf00      	nop
 8000210:	3740      	adds	r7, #64	@ 0x40
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800021c:	4b11      	ldr	r3, [pc, #68]	@ (8000264 <MX_USART1_UART_Init+0x4c>)
 800021e:	4a12      	ldr	r2, [pc, #72]	@ (8000268 <MX_USART1_UART_Init+0x50>)
 8000220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000222:	4b10      	ldr	r3, [pc, #64]	@ (8000264 <MX_USART1_UART_Init+0x4c>)
 8000224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800022a:	4b0e      	ldr	r3, [pc, #56]	@ (8000264 <MX_USART1_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000230:	4b0c      	ldr	r3, [pc, #48]	@ (8000264 <MX_USART1_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000236:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <MX_USART1_UART_Init+0x4c>)
 8000238:	2200      	movs	r2, #0
 800023a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800023c:	4b09      	ldr	r3, [pc, #36]	@ (8000264 <MX_USART1_UART_Init+0x4c>)
 800023e:	220c      	movs	r2, #12
 8000240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000242:	4b08      	ldr	r3, [pc, #32]	@ (8000264 <MX_USART1_UART_Init+0x4c>)
 8000244:	2200      	movs	r2, #0
 8000246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000248:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <MX_USART1_UART_Init+0x4c>)
 800024a:	2200      	movs	r2, #0
 800024c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800024e:	4805      	ldr	r0, [pc, #20]	@ (8000264 <MX_USART1_UART_Init+0x4c>)
 8000250:	f001 fd70 	bl	8001d34 <HAL_UART_Init>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800025a:	f000 fa87 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	2000008c 	.word	0x2000008c
 8000268:	40013800 	.word	0x40013800

0800026c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000270:	4b11      	ldr	r3, [pc, #68]	@ (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000272:	4a12      	ldr	r2, [pc, #72]	@ (80002bc <MX_USART2_UART_Init+0x50>)
 8000274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000276:	4b10      	ldr	r3, [pc, #64]	@ (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000278:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800027c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000284:	4b0c      	ldr	r3, [pc, #48]	@ (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800028a:	4b0b      	ldr	r3, [pc, #44]	@ (80002b8 <MX_USART2_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000290:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000292:	220c      	movs	r2, #12
 8000294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000296:	4b08      	ldr	r3, [pc, #32]	@ (80002b8 <MX_USART2_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800029c:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <MX_USART2_UART_Init+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002a2:	4805      	ldr	r0, [pc, #20]	@ (80002b8 <MX_USART2_UART_Init+0x4c>)
 80002a4:	f001 fd46 	bl	8001d34 <HAL_UART_Init>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ae:	f000 fa5d 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200000d4 	.word	0x200000d4
 80002bc:	40004400 	.word	0x40004400

080002c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	f107 0308 	add.w	r3, r7, #8
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d4:	4b18      	ldr	r3, [pc, #96]	@ (8000338 <MX_GPIO_Init+0x78>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a17      	ldr	r2, [pc, #92]	@ (8000338 <MX_GPIO_Init+0x78>)
 80002da:	f043 0310 	orr.w	r3, r3, #16
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <MX_GPIO_Init+0x78>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0310 	and.w	r3, r3, #16
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ec:	4b12      	ldr	r3, [pc, #72]	@ (8000338 <MX_GPIO_Init+0x78>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a11      	ldr	r2, [pc, #68]	@ (8000338 <MX_GPIO_Init+0x78>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000338 <MX_GPIO_Init+0x78>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0304 	and.w	r3, r3, #4
 8000300:	603b      	str	r3, [r7, #0]
 8000302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800030a:	480c      	ldr	r0, [pc, #48]	@ (800033c <MX_GPIO_Init+0x7c>)
 800030c:	f001 f8d0 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000310:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000316:	2301      	movs	r3, #1
 8000318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2300      	movs	r3, #0
 800031c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031e:	2302      	movs	r3, #2
 8000320:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000322:	f107 0308 	add.w	r3, r7, #8
 8000326:	4619      	mov	r1, r3
 8000328:	4804      	ldr	r0, [pc, #16]	@ (800033c <MX_GPIO_Init+0x7c>)
 800032a:	f000 ff3d 	bl	80011a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800032e:	bf00      	nop
 8000330:	3718      	adds	r7, #24
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000
 800033c:	40011000 	.word	0x40011000

08000340 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000348:	1d39      	adds	r1, r7, #4
 800034a:	f04f 33ff 	mov.w	r3, #4294967295
 800034e:	2201      	movs	r2, #1
 8000350:	4803      	ldr	r0, [pc, #12]	@ (8000360 <__io_putchar+0x20>)
 8000352:	f001 fd3f 	bl	8001dd4 <HAL_UART_Transmit>

  return ch;
 8000356:	687b      	ldr	r3, [r7, #4]
}
 8000358:	4618      	mov	r0, r3
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	2000008c 	.word	0x2000008c

08000364 <UART_Write_Loop>:


static int UART_Write_Loop( void )
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
  char tx = 'g';
 800036a:	2367      	movs	r3, #103	@ 0x67
 800036c:	71bb      	strb	r3, [r7, #6]
  char rx = '0';
 800036e:	2330      	movs	r3, #48	@ 0x30
 8000370:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef ex;
  int ret = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  int count = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]

  while(1)
  {
    //Toggle GPIO
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800037a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800037e:	4818      	ldr	r0, [pc, #96]	@ (80003e0 <UART_Write_Loop+0x7c>)
 8000380:	f001 f8ae 	bl	80014e0 <HAL_GPIO_TogglePin>

    HAL_UART_Transmit(&huart2, (uint8_t *)&tx, 1, HAL_MAX_DELAY);
 8000384:	1db9      	adds	r1, r7, #6
 8000386:	f04f 33ff 	mov.w	r3, #4294967295
 800038a:	2201      	movs	r2, #1
 800038c:	4815      	ldr	r0, [pc, #84]	@ (80003e4 <UART_Write_Loop+0x80>)
 800038e:	f001 fd21 	bl	8001dd4 <HAL_UART_Transmit>

    ex = HAL_UART_Receive(&huart2, (uint8_t *)&rx, 1, 10);
 8000392:	1d79      	adds	r1, r7, #5
 8000394:	230a      	movs	r3, #10
 8000396:	2201      	movs	r2, #1
 8000398:	4812      	ldr	r0, [pc, #72]	@ (80003e4 <UART_Write_Loop+0x80>)
 800039a:	f001 fda6 	bl	8001eea <HAL_UART_Receive>
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]

    if( ( ex == HAL_OK ) && ( rx == 'r' ) )
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d108      	bne.n	80003ba <UART_Write_Loop+0x56>
 80003a8:	797b      	ldrb	r3, [r7, #5]
 80003aa:	2b72      	cmp	r3, #114	@ 0x72
 80003ac:	d105      	bne.n	80003ba <UART_Write_Loop+0x56>
    {
      //received data
      printf("Firmware Update Started\r\n");
 80003ae:	480e      	ldr	r0, [pc, #56]	@ (80003e8 <UART_Write_Loop+0x84>)
 80003b0:	f002 f8a6 	bl	8002500 <puts>
      ret = 1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	60fb      	str	r3, [r7, #12]
      break;
 80003b8:	e00d      	b.n	80003d6 <UART_Write_Loop+0x72>
    }

    if( count == 100 )
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	2b64      	cmp	r3, #100	@ 0x64
 80003be:	d103      	bne.n	80003c8 <UART_Write_Loop+0x64>
    {
      //received nothing
      printf("No Data Received for Firmware Update\r\n");
 80003c0:	480a      	ldr	r0, [pc, #40]	@ (80003ec <UART_Write_Loop+0x88>)
 80003c2:	f002 f89d 	bl	8002500 <puts>
      break;
 80003c6:	e006      	b.n	80003d6 <UART_Write_Loop+0x72>
    }
    count++;
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	3301      	adds	r3, #1
 80003cc:	60bb      	str	r3, [r7, #8]
    HAL_Delay(20);              //20ms delay
 80003ce:	2014      	movs	r0, #20
 80003d0:	f000 fbe2 	bl	8000b98 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003d4:	e7d1      	b.n	800037a <UART_Write_Loop+0x16>
  }

  return ret;
 80003d6:	68fb      	ldr	r3, [r7, #12]
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40011000 	.word	0x40011000
 80003e4:	200000d4 	.word	0x200000d4
 80003e8:	08003214 	.word	0x08003214
 80003ec:	08003230 	.word	0x08003230

080003f0 <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 80003f0:	b5b0      	push	{r4, r5, r7, lr}
 80003f2:	b08a      	sub	sp, #40	@ 0x28
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	460b      	mov	r3, r1
 80003fa:	807b      	strh	r3, [r7, #2]
 80003fc:	4613      	mov	r3, r2
 80003fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 8000400:	f000 fd42 	bl	8000e88 <HAL_FLASH_Unlock>
 8000404:	4603      	mov	r3, r0
 8000406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 800040a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800040e:	2b00      	cmp	r3, #0
 8000410:	d16b      	bne.n	80004ea <write_data_to_flash_app+0xfa>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 8000412:	787b      	ldrb	r3, [r7, #1]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01a      	beq.n	800044e <write_data_to_flash_app+0x5e>
    {
      printf("Erasing the Flash memory...\r\n");
 8000418:	4839      	ldr	r0, [pc, #228]	@ (8000500 <write_data_to_flash_app+0x110>)
 800041a:	f002 f871 	bl	8002500 <puts>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.PageAddress   = ETX_APP_START_ADDRESS;
 8000422:	4b38      	ldr	r3, [pc, #224]	@ (8000504 <write_data_to_flash_app+0x114>)
 8000424:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbPages       = 47;                     //47 Pages
 8000426:	232f      	movs	r3, #47	@ 0x2f
 8000428:	61bb      	str	r3, [r7, #24]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 800042a:	f107 0208 	add.w	r2, r7, #8
 800042e:	f107 030c 	add.w	r3, r7, #12
 8000432:	4611      	mov	r1, r2
 8000434:	4618      	mov	r0, r3
 8000436:	f000 fe0f 	bl	8001058 <HAL_FLASHEx_Erase>
 800043a:	4603      	mov	r3, r0
 800043c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if( ret != HAL_OK )
 8000440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000444:	2b00      	cmp	r3, #0
 8000446:	d152      	bne.n	80004ee <write_data_to_flash_app+0xfe>
      {
        break;
      }
      application_write_idx = 0;
 8000448:	4b2f      	ldr	r3, [pc, #188]	@ (8000508 <write_data_to_flash_app+0x118>)
 800044a:	2200      	movs	r2, #0
 800044c:	801a      	strh	r2, [r3, #0]
    }

    for(int i = 0; i < data_len/2; i++)
 800044e:	2300      	movs	r3, #0
 8000450:	623b      	str	r3, [r7, #32]
 8000452:	e036      	b.n	80004c2 <write_data_to_flash_app+0xd2>
    {
      uint16_t halfword_data = data[i * 2] | (data[i * 2 + 1] << 8);
 8000454:	6a3b      	ldr	r3, [r7, #32]
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	461a      	mov	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	b21a      	sxth	r2, r3
 8000462:	6a3b      	ldr	r3, [r7, #32]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	3301      	adds	r3, #1
 8000468:	6879      	ldr	r1, [r7, #4]
 800046a:	440b      	add	r3, r1
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	021b      	lsls	r3, r3, #8
 8000470:	b21b      	sxth	r3, r3
 8000472:	4313      	orrs	r3, r2
 8000474:	b21b      	sxth	r3, r3
 8000476:	83fb      	strh	r3, [r7, #30]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
                               (ETX_APP_START_ADDRESS + application_write_idx ),
 8000478:	4b23      	ldr	r3, [pc, #140]	@ (8000508 <write_data_to_flash_app+0x118>)
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000480:	f503 4388 	add.w	r3, r3, #17408	@ 0x4400
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
 8000484:	4619      	mov	r1, r3
 8000486:	8bfb      	ldrh	r3, [r7, #30]
 8000488:	2200      	movs	r2, #0
 800048a:	461c      	mov	r4, r3
 800048c:	4615      	mov	r5, r2
 800048e:	4622      	mov	r2, r4
 8000490:	462b      	mov	r3, r5
 8000492:	2001      	movs	r0, #1
 8000494:	f000 fc88 	bl	8000da8 <HAL_FLASH_Program>
 8000498:	4603      	mov	r3, r0
 800049a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                               halfword_data
                             );
      if( ret == HAL_OK )
 800049e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d106      	bne.n	80004b4 <write_data_to_flash_app+0xc4>
      {
        //update the data count
        application_write_idx += 2;
 80004a6:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <write_data_to_flash_app+0x118>)
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	3302      	adds	r3, #2
 80004ac:	b29a      	uxth	r2, r3
 80004ae:	4b16      	ldr	r3, [pc, #88]	@ (8000508 <write_data_to_flash_app+0x118>)
 80004b0:	801a      	strh	r2, [r3, #0]
 80004b2:	e003      	b.n	80004bc <write_data_to_flash_app+0xcc>
      }
      else
      {
        printf("Flash Write Error...HALT!!!\r\n");
 80004b4:	4815      	ldr	r0, [pc, #84]	@ (800050c <write_data_to_flash_app+0x11c>)
 80004b6:	f002 f823 	bl	8002500 <puts>
        break;
 80004ba:	e009      	b.n	80004d0 <write_data_to_flash_app+0xe0>
    for(int i = 0; i < data_len/2; i++)
 80004bc:	6a3b      	ldr	r3, [r7, #32]
 80004be:	3301      	adds	r3, #1
 80004c0:	623b      	str	r3, [r7, #32]
 80004c2:	887b      	ldrh	r3, [r7, #2]
 80004c4:	085b      	lsrs	r3, r3, #1
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	461a      	mov	r2, r3
 80004ca:	6a3b      	ldr	r3, [r7, #32]
 80004cc:	4293      	cmp	r3, r2
 80004ce:	dbc1      	blt.n	8000454 <write_data_to_flash_app+0x64>
      }
    }

    if( ret != HAL_OK )
 80004d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d10c      	bne.n	80004f2 <write_data_to_flash_app+0x102>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 80004d8:	f000 fcfc 	bl	8000ed4 <HAL_FLASH_Lock>
 80004dc:	4603      	mov	r3, r0
 80004de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 80004e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	e004      	b.n	80004f4 <write_data_to_flash_app+0x104>
      break;
 80004ea:	bf00      	nop
 80004ec:	e002      	b.n	80004f4 <write_data_to_flash_app+0x104>
        break;
 80004ee:	bf00      	nop
 80004f0:	e000      	b.n	80004f4 <write_data_to_flash_app+0x104>
      break;
 80004f2:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 80004f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3728      	adds	r7, #40	@ 0x28
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000500:	08003258 	.word	0x08003258
 8000504:	08004400 	.word	0x08004400
 8000508:	2000011e 	.word	0x2000011e
 800050c:	08003278 	.word	0x08003278

08000510 <Firmware_Update>:
/**
  * @brief Check for Firmware Update and update the Firmware
  * @retval None
  */
static void Firmware_Update(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8000516:	af00      	add	r7, sp, #0
  uint8_t xx,yy;
  uint8_t x = 'x';
 8000518:	2378      	movs	r3, #120	@ 0x78
 800051a:	f887 3407 	strb.w	r3, [r7, #1031]	@ 0x407
  uint8_t y = 'y';
 800051e:	2379      	movs	r3, #121	@ 0x79
 8000520:	f887 3406 	strb.w	r3, [r7, #1030]	@ 0x406
  HAL_StatusTypeDef ex = HAL_OK;
 8000524:	2300      	movs	r3, #0
 8000526:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
  uint16_t current_app_size = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	f8a7 340c 	strh.w	r3, [r7, #1036]	@ 0x40c
  uint16_t i = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	f8a7 340a 	strh.w	r3, [r7, #1034]	@ 0x40a

  uint8_t block[MAX_BLOCK_SIZE] = { 0 };
 8000536:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800053a:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	3304      	adds	r3, #4
 8000544:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 f8b8 	bl	80026c0 <memset>

  do
  {
    if( UART_Write_Loop() != 0 )
 8000550:	f7ff ff08 	bl	8000364 <UART_Write_Loop>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	f000 80be 	beq.w	80006d8 <Firmware_Update+0x1c8>
    {
      //Sender is ready. Receive the Firmware Size

      // Ask yy
      HAL_UART_Transmit(&huart2, &y, 1, HAL_MAX_DELAY);
 800055c:	f207 4106 	addw	r1, r7, #1030	@ 0x406
 8000560:	f04f 33ff 	mov.w	r3, #4294967295
 8000564:	2201      	movs	r2, #1
 8000566:	4862      	ldr	r0, [pc, #392]	@ (80006f0 <Firmware_Update+0x1e0>)
 8000568:	f001 fc34 	bl	8001dd4 <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart2, &yy, 1, 5000);
 800056c:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8000570:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000574:	2201      	movs	r2, #1
 8000576:	485e      	ldr	r0, [pc, #376]	@ (80006f0 <Firmware_Update+0x1e0>)
 8000578:	f001 fcb7 	bl	8001eea <HAL_UART_Receive>
 800057c:	4603      	mov	r3, r0
 800057e:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
      if( ex != HAL_OK )
 8000582:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8000586:	2b00      	cmp	r3, #0
 8000588:	d003      	beq.n	8000592 <Firmware_Update+0x82>
      {
        printf("Get application Size error (yy)...HALT!!!\r\n");
 800058a:	485a      	ldr	r0, [pc, #360]	@ (80006f4 <Firmware_Update+0x1e4>)
 800058c:	f001 ffb8 	bl	8002500 <puts>
        break;
 8000590:	e0a2      	b.n	80006d8 <Firmware_Update+0x1c8>
      }

      // Ask xx
      HAL_UART_Transmit(&huart2, &x, 1, HAL_MAX_DELAY);
 8000592:	f207 4107 	addw	r1, r7, #1031	@ 0x407
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	2201      	movs	r2, #1
 800059c:	4854      	ldr	r0, [pc, #336]	@ (80006f0 <Firmware_Update+0x1e0>)
 800059e:	f001 fc19 	bl	8001dd4 <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart2, &xx, 1, 5000);
 80005a2:	f207 4109 	addw	r1, r7, #1033	@ 0x409
 80005a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80005aa:	2201      	movs	r2, #1
 80005ac:	4850      	ldr	r0, [pc, #320]	@ (80006f0 <Firmware_Update+0x1e0>)
 80005ae:	f001 fc9c 	bl	8001eea <HAL_UART_Receive>
 80005b2:	4603      	mov	r3, r0
 80005b4:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
      if( ex != HAL_OK )
 80005b8:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d003      	beq.n	80005c8 <Firmware_Update+0xb8>
      {
        printf("Get application Size error(XX)...HALT!!!\r\n");
 80005c0:	484d      	ldr	r0, [pc, #308]	@ (80006f8 <Firmware_Update+0x1e8>)
 80005c2:	f001 ff9d 	bl	8002500 <puts>
        break;
 80005c6:	e087      	b.n	80006d8 <Firmware_Update+0x1c8>
      }

      application_size = yy | (xx << 8);
 80005c8:	f897 3408 	ldrb.w	r3, [r7, #1032]	@ 0x408
 80005cc:	b21a      	sxth	r2, r3
 80005ce:	f897 3409 	ldrb.w	r3, [r7, #1033]	@ 0x409
 80005d2:	021b      	lsls	r3, r3, #8
 80005d4:	b21b      	sxth	r3, r3
 80005d6:	4313      	orrs	r3, r2
 80005d8:	b21b      	sxth	r3, r3
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b47      	ldr	r3, [pc, #284]	@ (80006fc <Firmware_Update+0x1ec>)
 80005de:	801a      	strh	r2, [r3, #0]
      printf("Application Size = %d bytes\r\n", application_size);
 80005e0:	4b46      	ldr	r3, [pc, #280]	@ (80006fc <Firmware_Update+0x1ec>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	4846      	ldr	r0, [pc, #280]	@ (8000700 <Firmware_Update+0x1f0>)
 80005e8:	f001 ff22 	bl	8002430 <iprintf>

      while(1)
      {
        if( ( i == MAX_BLOCK_SIZE ) || ( current_app_size >= application_size) )
 80005ec:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	@ 0x40a
 80005f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005f4:	d005      	beq.n	8000602 <Firmware_Update+0xf2>
 80005f6:	4b41      	ldr	r3, [pc, #260]	@ (80006fc <Firmware_Update+0x1ec>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	f8b7 240c 	ldrh.w	r2, [r7, #1036]	@ 0x40c
 80005fe:	429a      	cmp	r2, r3
 8000600:	d326      	bcc.n	8000650 <Firmware_Update+0x140>
        {
          printf("Received Block[%d]\r\n", current_app_size/MAX_BLOCK_SIZE);
 8000602:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	@ 0x40c
 8000606:	0a9b      	lsrs	r3, r3, #10
 8000608:	b29b      	uxth	r3, r3
 800060a:	4619      	mov	r1, r3
 800060c:	483d      	ldr	r0, [pc, #244]	@ (8000704 <Firmware_Update+0x1f4>)
 800060e:	f001 ff0f 	bl	8002430 <iprintf>

          //write to flash
          ex = write_data_to_flash_app(block, MAX_BLOCK_SIZE, (current_app_size <= MAX_BLOCK_SIZE) );
 8000612:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	@ 0x40c
 8000616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800061a:	bf94      	ite	ls
 800061c:	2301      	movls	r3, #1
 800061e:	2300      	movhi	r3, #0
 8000620:	b2da      	uxtb	r2, r3
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fee1 	bl	80003f0 <write_data_to_flash_app>
 800062e:	4603      	mov	r3, r0
 8000630:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f

          if( ex != HAL_OK )
 8000634:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8000638:	2b00      	cmp	r3, #0
 800063a:	d14c      	bne.n	80006d6 <Firmware_Update+0x1c6>
          {
            break;
          }

          //clear the memory
          memset(block, 0,MAX_BLOCK_SIZE);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f002 f83b 	bl	80026c0 <memset>
          i = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	f8a7 340a 	strh.w	r3, [r7, #1034]	@ 0x40a
        }

        if( current_app_size >= application_size)
 8000650:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <Firmware_Update+0x1ec>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	f8b7 240c 	ldrh.w	r2, [r7, #1036]	@ 0x40c
 8000658:	429a      	cmp	r2, r3
 800065a:	d303      	bcc.n	8000664 <Firmware_Update+0x154>
        {
          //received all data. exit
          ex = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
          break;
 8000662:	e039      	b.n	80006d8 <Firmware_Update+0x1c8>
        }

        // Ask yy
        HAL_UART_Transmit(&huart2, &y, 1, HAL_MAX_DELAY);
 8000664:	f207 4106 	addw	r1, r7, #1030	@ 0x406
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	2201      	movs	r2, #1
 800066e:	4820      	ldr	r0, [pc, #128]	@ (80006f0 <Firmware_Update+0x1e0>)
 8000670:	f001 fbb0 	bl	8001dd4 <HAL_UART_Transmit>
        ex = HAL_UART_Receive(&huart2, &yy, 1, 5000);
 8000674:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8000678:	f241 3388 	movw	r3, #5000	@ 0x1388
 800067c:	2201      	movs	r2, #1
 800067e:	481c      	ldr	r0, [pc, #112]	@ (80006f0 <Firmware_Update+0x1e0>)
 8000680:	f001 fc33 	bl	8001eea <HAL_UART_Receive>
 8000684:	4603      	mov	r3, r0
 8000686:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
        if( ex != HAL_OK )
 800068a:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <Firmware_Update+0x190>
        {
          printf("Get application data[index:%d] error (yy)...HALT!!!\r\n", i);
 8000692:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	@ 0x40a
 8000696:	4619      	mov	r1, r3
 8000698:	481b      	ldr	r0, [pc, #108]	@ (8000708 <Firmware_Update+0x1f8>)
 800069a:	f001 fec9 	bl	8002430 <iprintf>
          break;
 800069e:	e01b      	b.n	80006d8 <Firmware_Update+0x1c8>
        }

        // Ask xx
        HAL_UART_Transmit(&huart2, &x, 1, HAL_MAX_DELAY);
 80006a0:	f207 4107 	addw	r1, r7, #1031	@ 0x407
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	2201      	movs	r2, #1
 80006aa:	4811      	ldr	r0, [pc, #68]	@ (80006f0 <Firmware_Update+0x1e0>)
 80006ac:	f001 fb92 	bl	8001dd4 <HAL_UART_Transmit>
       //  printf("Get application data[index:%d] error(XX)...HALT!!!\r\n", i);
       //   break;
       // }

        //--- Save xxyy in block[i]
        block[i++] = yy;
 80006b0:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	@ 0x40a
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	f8a7 240a 	strh.w	r2, [r7, #1034]	@ 0x40a
 80006ba:	461a      	mov	r2, r3
 80006bc:	f897 1408 	ldrb.w	r1, [r7, #1032]	@ 0x408
 80006c0:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80006c4:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80006c8:	5499      	strb	r1, [r3, r2]
      //  block[i++] = xx;
        current_app_size += 1;
 80006ca:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	@ 0x40c
 80006ce:	3301      	adds	r3, #1
 80006d0:	f8a7 340c 	strh.w	r3, [r7, #1036]	@ 0x40c
        if( ( i == MAX_BLOCK_SIZE ) || ( current_app_size >= application_size) )
 80006d4:	e78a      	b.n	80005ec <Firmware_Update+0xdc>
            break;
 80006d6:	bf00      	nop
      }
    }
  }
  while( false );

  if( ex != HAL_OK )
 80006d8:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <Firmware_Update+0x1d4>
  {
    while(1);
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <Firmware_Update+0x1d0>
  }
}
 80006e4:	bf00      	nop
 80006e6:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000d4 	.word	0x200000d4
 80006f4:	08003298 	.word	0x08003298
 80006f8:	080032c4 	.word	0x080032c4
 80006fc:	2000011c 	.word	0x2000011c
 8000700:	080032f0 	.word	0x080032f0
 8000704:	08003310 	.word	0x08003310
 8000708:	08003328 	.word	0x08003328

0800070c <goto_application>:

static void goto_application( void )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
	printf("Gonna Jump to Application...\n");
 8000712:	4811      	ldr	r0, [pc, #68]	@ (8000758 <goto_application+0x4c>)
 8000714:	f001 fef4 	bl	8002500 <puts>
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(ETX_APP_START_ADDRESS + 4U)));
 8000718:	4b10      	ldr	r3, [pc, #64]	@ (800075c <goto_application+0x50>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	607b      	str	r3, [r7, #4]

	if( app_reset_handler == (void*)0xFFFFFFFF )
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000724:	d104      	bne.n	8000730 <goto_application+0x24>
	{
	  printf("Invalid Application... HALT!!!\r\n");
 8000726:	480e      	ldr	r0, [pc, #56]	@ (8000760 <goto_application+0x54>)
 8000728:	f001 feea 	bl	8002500 <puts>
	  while(1);
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <goto_application+0x20>
	}

	__set_MSP(*(volatile uint32_t*) ETX_APP_START_ADDRESS);
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <goto_application+0x58>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	f383 8808 	msr	MSP, r3
}
 800073c:	bf00      	nop

	// Turn OFF the Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000744:	4808      	ldr	r0, [pc, #32]	@ (8000768 <goto_application+0x5c>)
 8000746:	f000 feb3 	bl	80014b0 <HAL_GPIO_WritePin>

	app_reset_handler();    //call the app reset handler
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4798      	blx	r3
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	08003360 	.word	0x08003360
 800075c:	08004404 	.word	0x08004404
 8000760:	08003380 	.word	0x08003380
 8000764:	08004400 	.word	0x08004400
 8000768:	40011000 	.word	0x40011000

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <Error_Handler+0x8>

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <HAL_MspInit+0x5c>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a14      	ldr	r2, [pc, #80]	@ (80007d4 <HAL_MspInit+0x5c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <HAL_MspInit+0x5c>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <HAL_MspInit+0x5c>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a0e      	ldr	r2, [pc, #56]	@ (80007d4 <HAL_MspInit+0x5c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <HAL_MspInit+0x5c>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <HAL_MspInit+0x60>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <HAL_MspInit+0x60>)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010000 	.word	0x40010000

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a37      	ldr	r2, [pc, #220]	@ (80008d4 <HAL_UART_MspInit+0xf8>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d132      	bne.n	8000862 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007fc:	4b36      	ldr	r3, [pc, #216]	@ (80008d8 <HAL_UART_MspInit+0xfc>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a35      	ldr	r2, [pc, #212]	@ (80008d8 <HAL_UART_MspInit+0xfc>)
 8000802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b33      	ldr	r3, [pc, #204]	@ (80008d8 <HAL_UART_MspInit+0xfc>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b30      	ldr	r3, [pc, #192]	@ (80008d8 <HAL_UART_MspInit+0xfc>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a2f      	ldr	r2, [pc, #188]	@ (80008d8 <HAL_UART_MspInit+0xfc>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b2d      	ldr	r3, [pc, #180]	@ (80008d8 <HAL_UART_MspInit+0xfc>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800082c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4619      	mov	r1, r3
 8000840:	4826      	ldr	r0, [pc, #152]	@ (80008dc <HAL_UART_MspInit+0x100>)
 8000842:	f000 fcb1 	bl	80011a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000846:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800084a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	4619      	mov	r1, r3
 800085a:	4820      	ldr	r0, [pc, #128]	@ (80008dc <HAL_UART_MspInit+0x100>)
 800085c:	f000 fca4 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000860:	e034      	b.n	80008cc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a1e      	ldr	r2, [pc, #120]	@ (80008e0 <HAL_UART_MspInit+0x104>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d12f      	bne.n	80008cc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800086c:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <HAL_UART_MspInit+0xfc>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	4a19      	ldr	r2, [pc, #100]	@ (80008d8 <HAL_UART_MspInit+0xfc>)
 8000872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000876:	61d3      	str	r3, [r2, #28]
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <HAL_UART_MspInit+0xfc>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <HAL_UART_MspInit+0xfc>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a13      	ldr	r2, [pc, #76]	@ (80008d8 <HAL_UART_MspInit+0xfc>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <HAL_UART_MspInit+0xfc>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800089c:	2304      	movs	r3, #4
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	4619      	mov	r1, r3
 80008ae:	480b      	ldr	r0, [pc, #44]	@ (80008dc <HAL_UART_MspInit+0x100>)
 80008b0:	f000 fc7a 	bl	80011a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008b4:	2308      	movs	r3, #8
 80008b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0318 	add.w	r3, r7, #24
 80008c4:	4619      	mov	r1, r3
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <HAL_UART_MspInit+0x100>)
 80008c8:	f000 fc6e 	bl	80011a8 <HAL_GPIO_Init>
}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	@ 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40013800 	.word	0x40013800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010800 	.word	0x40010800
 80008e0:	40004400 	.word	0x40004400

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <NMI_Handler+0x4>

080008ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <MemManage_Handler+0x4>

080008fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <UsageFault_Handler+0x4>

0800090c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 f914 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	e00a      	b.n	8000964 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800094e:	f3af 8000 	nop.w
 8000952:	4601      	mov	r1, r0
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	60ba      	str	r2, [r7, #8]
 800095a:	b2ca      	uxtb	r2, r1
 800095c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	3301      	adds	r3, #1
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	429a      	cmp	r2, r3
 800096a:	dbf0      	blt.n	800094e <_read+0x12>
  }

  return len;
 800096c:	687b      	ldr	r3, [r7, #4]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b086      	sub	sp, #24
 800097a:	af00      	add	r7, sp, #0
 800097c:	60f8      	str	r0, [r7, #12]
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	e009      	b.n	800099c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60ba      	str	r2, [r7, #8]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fcd5 	bl	8000340 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	dbf1      	blt.n	8000988 <_write+0x12>
  }
  return len;
 80009a4:	687b      	ldr	r3, [r7, #4]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_close>:

int _close(int file)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009d4:	605a      	str	r2, [r3, #4]
  return 0;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <_isatty>:

int _isatty(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr

080009f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b085      	sub	sp, #20
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	60f8      	str	r0, [r7, #12]
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
	...

08000a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a18:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <_sbrk+0x5c>)
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <_sbrk+0x60>)
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <_sbrk+0x64>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <_sbrk+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d207      	bcs.n	8000a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a40:	f001 fe8c 	bl	800275c <__errno>
 8000a44:	4603      	mov	r3, r0
 8000a46:	220c      	movs	r2, #12
 8000a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	e009      	b.n	8000a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a56:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <_sbrk+0x64>)
 8000a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a62:	68fb      	ldr	r3, [r7, #12]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20005000 	.word	0x20005000
 8000a70:	00000400 	.word	0x00000400
 8000a74:	20000120 	.word	0x20000120
 8000a78:	20000298 	.word	0x20000298

08000a7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a88:	f7ff fff8 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480b      	ldr	r0, [pc, #44]	@ (8000abc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a8e:	490c      	ldr	r1, [pc, #48]	@ (8000ac0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a90:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a09      	ldr	r2, [pc, #36]	@ (8000ac8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000aa4:	4c09      	ldr	r4, [pc, #36]	@ (8000acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f001 fe59 	bl	8002768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ab6:	f7ff fb49 	bl	800014c <main>
  bx lr
 8000aba:	4770      	bx	lr
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ac4:	08003408 	.word	0x08003408
  ldr r2, =_sbss
 8000ac8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000acc:	20000294 	.word	0x20000294

08000ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_2_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <HAL_Init+0x28>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	@ (8000afc <HAL_Init+0x28>)
 8000ade:	f043 0310 	orr.w	r3, r3, #16
 8000ae2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f92b 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aea:	200f      	movs	r0, #15
 8000aec:	f000 f808 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af0:	f7ff fe42 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40022000 	.word	0x40022000

08000b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_InitTick+0x54>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <HAL_InitTick+0x58>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f935 	bl	8000d8e <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00e      	b.n	8000b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d80a      	bhi.n	8000b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f000 f90b 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <HAL_InitTick+0x5c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000004 	.word	0x20000004
 8000b58:	2000000c 	.word	0x2000000c
 8000b5c:	20000008 	.word	0x20000008

08000b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <HAL_IncTick+0x1c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <HAL_IncTick+0x20>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a03      	ldr	r2, [pc, #12]	@ (8000b80 <HAL_IncTick+0x20>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	2000000c 	.word	0x2000000c
 8000b80:	20000124 	.word	0x20000124

08000b84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b02      	ldr	r3, [pc, #8]	@ (8000b94 <HAL_GetTick+0x10>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	20000124 	.word	0x20000124

08000b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba0:	f7ff fff0 	bl	8000b84 <HAL_GetTick>
 8000ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb0:	d005      	beq.n	8000bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <HAL_Delay+0x44>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4413      	add	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bbe:	bf00      	nop
 8000bc0:	f7ff ffe0 	bl	8000b84 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d8f7      	bhi.n	8000bc0 <HAL_Delay+0x28>
  {
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000000c 	.word	0x2000000c

08000be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c12:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	60d3      	str	r3, [r2, #12]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c2c:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <__NVIC_GetPriorityGrouping+0x18>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	f003 0307 	and.w	r3, r3, #7
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	@ (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	@ (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	@ 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	@ 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff90 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff49 	bl	8000be0 <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff5e 	bl	8000c28 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff90 	bl	8000c98 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5f 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffb0 	bl	8000cfc <SysTick_Config>
 8000d9c:	4603      	mov	r3, r0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <HAL_FLASH_Program+0xd8>)
 8000dc4:	7e1b      	ldrb	r3, [r3, #24]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d101      	bne.n	8000dce <HAL_FLASH_Program+0x26>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e054      	b.n	8000e78 <HAL_FLASH_Program+0xd0>
 8000dce:	4b2c      	ldr	r3, [pc, #176]	@ (8000e80 <HAL_FLASH_Program+0xd8>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000dd4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000dd8:	f000 f8a8 	bl	8000f2c <FLASH_WaitForLastOperation>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000de0:	7dfb      	ldrb	r3, [r7, #23]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d144      	bne.n	8000e70 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d102      	bne.n	8000df2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000dec:	2301      	movs	r3, #1
 8000dee:	757b      	strb	r3, [r7, #21]
 8000df0:	e007      	b.n	8000e02 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d102      	bne.n	8000dfe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	757b      	strb	r3, [r7, #21]
 8000dfc:	e001      	b.n	8000e02 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	75bb      	strb	r3, [r7, #22]
 8000e06:	e02d      	b.n	8000e64 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000e08:	7dbb      	ldrb	r3, [r7, #22]
 8000e0a:	005a      	lsls	r2, r3, #1
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	eb02 0c03 	add.w	ip, r2, r3
 8000e12:	7dbb      	ldrb	r3, [r7, #22]
 8000e14:	0119      	lsls	r1, r3, #4
 8000e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e1a:	f1c1 0620 	rsb	r6, r1, #32
 8000e1e:	f1a1 0020 	sub.w	r0, r1, #32
 8000e22:	fa22 f401 	lsr.w	r4, r2, r1
 8000e26:	fa03 f606 	lsl.w	r6, r3, r6
 8000e2a:	4334      	orrs	r4, r6
 8000e2c:	fa23 f000 	lsr.w	r0, r3, r0
 8000e30:	4304      	orrs	r4, r0
 8000e32:	fa23 f501 	lsr.w	r5, r3, r1
 8000e36:	b2a3      	uxth	r3, r4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	f000 f85a 	bl	8000ef4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e40:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e44:	f000 f872 	bl	8000f2c <FLASH_WaitForLastOperation>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <HAL_FLASH_Program+0xdc>)
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	4a0c      	ldr	r2, [pc, #48]	@ (8000e84 <HAL_FLASH_Program+0xdc>)
 8000e52:	f023 0301 	bic.w	r3, r3, #1
 8000e56:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000e58:	7dfb      	ldrb	r3, [r7, #23]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d107      	bne.n	8000e6e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000e5e:	7dbb      	ldrb	r3, [r7, #22]
 8000e60:	3301      	adds	r3, #1
 8000e62:	75bb      	strb	r3, [r7, #22]
 8000e64:	7dba      	ldrb	r2, [r7, #22]
 8000e66:	7d7b      	ldrb	r3, [r7, #21]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d3cd      	bcc.n	8000e08 <HAL_FLASH_Program+0x60>
 8000e6c:	e000      	b.n	8000e70 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000e6e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <HAL_FLASH_Program+0xd8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	761a      	strb	r2, [r3, #24]

  return status;
 8000e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e80:	20000128 	.word	0x20000128
 8000e84:	40022000 	.word	0x40022000

08000e88 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <HAL_FLASH_Unlock+0x40>)
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00d      	beq.n	8000eba <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_FLASH_Unlock+0x40>)
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <HAL_FLASH_Unlock+0x44>)
 8000ea2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <HAL_FLASH_Unlock+0x40>)
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <HAL_FLASH_Unlock+0x48>)
 8000ea8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000eaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <HAL_FLASH_Unlock+0x40>)
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000eba:	79fb      	ldrb	r3, [r7, #7]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40022000 	.word	0x40022000
 8000ecc:	45670123 	.word	0x45670123
 8000ed0:	cdef89ab 	.word	0xcdef89ab

08000ed4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <HAL_FLASH_Lock+0x1c>)
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_FLASH_Lock+0x1c>)
 8000ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40022000 	.word	0x40022000

08000ef4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <FLASH_Program_HalfWord+0x30>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <FLASH_Program_HalfWord+0x34>)
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	4a07      	ldr	r2, [pc, #28]	@ (8000f28 <FLASH_Program_HalfWord+0x34>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	887a      	ldrh	r2, [r7, #2]
 8000f16:	801a      	strh	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000128 	.word	0x20000128
 8000f28:	40022000 	.word	0x40022000

08000f2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff fe26 	bl	8000b84 <HAL_GetTick>
 8000f38:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f3a:	e010      	b.n	8000f5e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f42:	d00c      	beq.n	8000f5e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d007      	beq.n	8000f5a <FLASH_WaitForLastOperation+0x2e>
 8000f4a:	f7ff fe1b 	bl	8000b84 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d201      	bcs.n	8000f5e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e025      	b.n	8000faa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <FLASH_WaitForLastOperation+0x88>)
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1e8      	bne.n	8000f3c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <FLASH_WaitForLastOperation+0x88>)
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	f003 0320 	and.w	r3, r3, #32
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <FLASH_WaitForLastOperation+0x88>)
 8000f78:	2220      	movs	r2, #32
 8000f7a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <FLASH_WaitForLastOperation+0x88>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	f003 0310 	and.w	r3, r3, #16
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10b      	bne.n	8000fa0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000f88:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <FLASH_WaitForLastOperation+0x88>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d105      	bne.n	8000fa0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f94:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <FLASH_WaitForLastOperation+0x88>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000fa0:	f000 f80a 	bl	8000fb8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40022000 	.word	0x40022000

08000fb8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000fc2:	4b23      	ldr	r3, [pc, #140]	@ (8001050 <FLASH_SetErrorCode+0x98>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d009      	beq.n	8000fe2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000fce:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <FLASH_SetErrorCode+0x9c>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001054 <FLASH_SetErrorCode+0x9c>)
 8000fd8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <FLASH_SetErrorCode+0x98>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d009      	beq.n	8001002 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <FLASH_SetErrorCode+0x9c>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <FLASH_SetErrorCode+0x9c>)
 8000ff8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <FLASH_SetErrorCode+0x98>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <FLASH_SetErrorCode+0x9c>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f043 0304 	orr.w	r3, r3, #4
 8001016:	4a0f      	ldr	r2, [pc, #60]	@ (8001054 <FLASH_SetErrorCode+0x9c>)
 8001018:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <FLASH_SetErrorCode+0x98>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <FLASH_SetErrorCode+0x98>)
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f240 1201 	movw	r2, #257	@ 0x101
 800102c:	4293      	cmp	r3, r2
 800102e:	d106      	bne.n	800103e <FLASH_SetErrorCode+0x86>
 8001030:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <FLASH_SetErrorCode+0x98>)
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	4a06      	ldr	r2, [pc, #24]	@ (8001050 <FLASH_SetErrorCode+0x98>)
 8001036:	f023 0301 	bic.w	r3, r3, #1
 800103a:	61d3      	str	r3, [r2, #28]
}  
 800103c:	e002      	b.n	8001044 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800103e:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <FLASH_SetErrorCode+0x98>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	60d3      	str	r3, [r2, #12]
}  
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40022000 	.word	0x40022000
 8001054:	20000128 	.word	0x20000128

08001058 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800106a:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <HAL_FLASHEx_Erase+0xd0>)
 800106c:	7e1b      	ldrb	r3, [r3, #24]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d101      	bne.n	8001076 <HAL_FLASHEx_Erase+0x1e>
 8001072:	2302      	movs	r3, #2
 8001074:	e053      	b.n	800111e <HAL_FLASHEx_Erase+0xc6>
 8001076:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <HAL_FLASHEx_Erase+0xd0>)
 8001078:	2201      	movs	r2, #1
 800107a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d116      	bne.n	80010b2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001084:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001088:	f7ff ff50 	bl	8000f2c <FLASH_WaitForLastOperation>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d141      	bne.n	8001116 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001092:	2001      	movs	r0, #1
 8001094:	f000 f84c 	bl	8001130 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001098:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800109c:	f7ff ff46 	bl	8000f2c <FLASH_WaitForLastOperation>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80010a4:	4b21      	ldr	r3, [pc, #132]	@ (800112c <HAL_FLASHEx_Erase+0xd4>)
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	4a20      	ldr	r2, [pc, #128]	@ (800112c <HAL_FLASHEx_Erase+0xd4>)
 80010aa:	f023 0304 	bic.w	r3, r3, #4
 80010ae:	6113      	str	r3, [r2, #16]
 80010b0:	e031      	b.n	8001116 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80010b2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010b6:	f7ff ff39 	bl	8000f2c <FLASH_WaitForLastOperation>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d12a      	bne.n	8001116 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	f04f 32ff 	mov.w	r2, #4294967295
 80010c6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	e019      	b.n	8001104 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80010d0:	68b8      	ldr	r0, [r7, #8]
 80010d2:	f000 f849 	bl	8001168 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010d6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010da:	f7ff ff27 	bl	8000f2c <FLASH_WaitForLastOperation>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_FLASHEx_Erase+0xd4>)
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	4a11      	ldr	r2, [pc, #68]	@ (800112c <HAL_FLASHEx_Erase+0xd4>)
 80010e8:	f023 0302 	bic.w	r3, r3, #2
 80010ec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	601a      	str	r2, [r3, #0]
            break;
 80010fa:	e00c      	b.n	8001116 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001102:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	029a      	lsls	r2, r3, #10
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	4413      	add	r3, r2
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	429a      	cmp	r2, r3
 8001114:	d3dc      	bcc.n	80010d0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001116:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <HAL_FLASHEx_Erase+0xd0>)
 8001118:	2200      	movs	r2, #0
 800111a:	761a      	strb	r2, [r3, #24]

  return status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000128 	.word	0x20000128
 800112c:	40022000 	.word	0x40022000

08001130 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001138:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <FLASH_MassErase+0x30>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <FLASH_MassErase+0x34>)
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <FLASH_MassErase+0x34>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <FLASH_MassErase+0x34>)
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <FLASH_MassErase+0x34>)
 8001150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001154:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	20000128 	.word	0x20000128
 8001164:	40022000 	.word	0x40022000

08001168 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <FLASH_PageErase+0x38>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <FLASH_PageErase+0x3c>)
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <FLASH_PageErase+0x3c>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001182:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <FLASH_PageErase+0x3c>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <FLASH_PageErase+0x3c>)
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <FLASH_PageErase+0x3c>)
 800118e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001192:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000128 	.word	0x20000128
 80011a4:	40022000 	.word	0x40022000

080011a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b08b      	sub	sp, #44	@ 0x2c
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ba:	e169      	b.n	8001490 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011bc:	2201      	movs	r2, #1
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f040 8158 	bne.w	800148a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4a9a      	ldr	r2, [pc, #616]	@ (8001448 <HAL_GPIO_Init+0x2a0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d05e      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 80011e4:	4a98      	ldr	r2, [pc, #608]	@ (8001448 <HAL_GPIO_Init+0x2a0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d875      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 80011ea:	4a98      	ldr	r2, [pc, #608]	@ (800144c <HAL_GPIO_Init+0x2a4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d058      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 80011f0:	4a96      	ldr	r2, [pc, #600]	@ (800144c <HAL_GPIO_Init+0x2a4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d86f      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 80011f6:	4a96      	ldr	r2, [pc, #600]	@ (8001450 <HAL_GPIO_Init+0x2a8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d052      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 80011fc:	4a94      	ldr	r2, [pc, #592]	@ (8001450 <HAL_GPIO_Init+0x2a8>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d869      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 8001202:	4a94      	ldr	r2, [pc, #592]	@ (8001454 <HAL_GPIO_Init+0x2ac>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d04c      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 8001208:	4a92      	ldr	r2, [pc, #584]	@ (8001454 <HAL_GPIO_Init+0x2ac>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d863      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 800120e:	4a92      	ldr	r2, [pc, #584]	@ (8001458 <HAL_GPIO_Init+0x2b0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d046      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 8001214:	4a90      	ldr	r2, [pc, #576]	@ (8001458 <HAL_GPIO_Init+0x2b0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d85d      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 800121a:	2b12      	cmp	r3, #18
 800121c:	d82a      	bhi.n	8001274 <HAL_GPIO_Init+0xcc>
 800121e:	2b12      	cmp	r3, #18
 8001220:	d859      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 8001222:	a201      	add	r2, pc, #4	@ (adr r2, 8001228 <HAL_GPIO_Init+0x80>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	080012a3 	.word	0x080012a3
 800122c:	0800127d 	.word	0x0800127d
 8001230:	0800128f 	.word	0x0800128f
 8001234:	080012d1 	.word	0x080012d1
 8001238:	080012d7 	.word	0x080012d7
 800123c:	080012d7 	.word	0x080012d7
 8001240:	080012d7 	.word	0x080012d7
 8001244:	080012d7 	.word	0x080012d7
 8001248:	080012d7 	.word	0x080012d7
 800124c:	080012d7 	.word	0x080012d7
 8001250:	080012d7 	.word	0x080012d7
 8001254:	080012d7 	.word	0x080012d7
 8001258:	080012d7 	.word	0x080012d7
 800125c:	080012d7 	.word	0x080012d7
 8001260:	080012d7 	.word	0x080012d7
 8001264:	080012d7 	.word	0x080012d7
 8001268:	080012d7 	.word	0x080012d7
 800126c:	08001285 	.word	0x08001285
 8001270:	08001299 	.word	0x08001299
 8001274:	4a79      	ldr	r2, [pc, #484]	@ (800145c <HAL_GPIO_Init+0x2b4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800127a:	e02c      	b.n	80012d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	623b      	str	r3, [r7, #32]
          break;
 8001282:	e029      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	3304      	adds	r3, #4
 800128a:	623b      	str	r3, [r7, #32]
          break;
 800128c:	e024      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	3308      	adds	r3, #8
 8001294:	623b      	str	r3, [r7, #32]
          break;
 8001296:	e01f      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	330c      	adds	r3, #12
 800129e:	623b      	str	r3, [r7, #32]
          break;
 80012a0:	e01a      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012aa:	2304      	movs	r3, #4
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e013      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d105      	bne.n	80012c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b8:	2308      	movs	r3, #8
 80012ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	611a      	str	r2, [r3, #16]
          break;
 80012c2:	e009      	b.n	80012d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c4:	2308      	movs	r3, #8
 80012c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	615a      	str	r2, [r3, #20]
          break;
 80012ce:	e003      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
          break;
 80012d4:	e000      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          break;
 80012d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2bff      	cmp	r3, #255	@ 0xff
 80012dc:	d801      	bhi.n	80012e2 <HAL_GPIO_Init+0x13a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	e001      	b.n	80012e6 <HAL_GPIO_Init+0x13e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3304      	adds	r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2bff      	cmp	r3, #255	@ 0xff
 80012ec:	d802      	bhi.n	80012f4 <HAL_GPIO_Init+0x14c>
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	e002      	b.n	80012fa <HAL_GPIO_Init+0x152>
 80012f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f6:	3b08      	subs	r3, #8
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	210f      	movs	r1, #15
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	6a39      	ldr	r1, [r7, #32]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	431a      	orrs	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 80b1 	beq.w	800148a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001328:	4b4d      	ldr	r3, [pc, #308]	@ (8001460 <HAL_GPIO_Init+0x2b8>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a4c      	ldr	r2, [pc, #304]	@ (8001460 <HAL_GPIO_Init+0x2b8>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b4a      	ldr	r3, [pc, #296]	@ (8001460 <HAL_GPIO_Init+0x2b8>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001340:	4a48      	ldr	r2, [pc, #288]	@ (8001464 <HAL_GPIO_Init+0x2bc>)
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	220f      	movs	r2, #15
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a40      	ldr	r2, [pc, #256]	@ (8001468 <HAL_GPIO_Init+0x2c0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d013      	beq.n	8001394 <HAL_GPIO_Init+0x1ec>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a3f      	ldr	r2, [pc, #252]	@ (800146c <HAL_GPIO_Init+0x2c4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d00d      	beq.n	8001390 <HAL_GPIO_Init+0x1e8>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a3e      	ldr	r2, [pc, #248]	@ (8001470 <HAL_GPIO_Init+0x2c8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d007      	beq.n	800138c <HAL_GPIO_Init+0x1e4>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a3d      	ldr	r2, [pc, #244]	@ (8001474 <HAL_GPIO_Init+0x2cc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_GPIO_Init+0x1e0>
 8001384:	2303      	movs	r3, #3
 8001386:	e006      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 8001388:	2304      	movs	r3, #4
 800138a:	e004      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 800138c:	2302      	movs	r3, #2
 800138e:	e002      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 8001394:	2300      	movs	r3, #0
 8001396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001398:	f002 0203 	and.w	r2, r2, #3
 800139c:	0092      	lsls	r2, r2, #2
 800139e:	4093      	lsls	r3, r2
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013a6:	492f      	ldr	r1, [pc, #188]	@ (8001464 <HAL_GPIO_Init+0x2bc>)
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	492c      	ldr	r1, [pc, #176]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	608b      	str	r3, [r1, #8]
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	4928      	ldr	r1, [pc, #160]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013d8:	4013      	ands	r3, r2
 80013da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013e8:	4b23      	ldr	r3, [pc, #140]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	4922      	ldr	r1, [pc, #136]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	60cb      	str	r3, [r1, #12]
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	491e      	ldr	r1, [pc, #120]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 8001400:	4013      	ands	r3, r2
 8001402:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001410:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	4918      	ldr	r1, [pc, #96]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	43db      	mvns	r3, r3
 8001426:	4914      	ldr	r1, [pc, #80]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 8001428:	4013      	ands	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d021      	beq.n	800147c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	490e      	ldr	r1, [pc, #56]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
 8001444:	e021      	b.n	800148a <HAL_GPIO_Init+0x2e2>
 8001446:	bf00      	nop
 8001448:	10320000 	.word	0x10320000
 800144c:	10310000 	.word	0x10310000
 8001450:	10220000 	.word	0x10220000
 8001454:	10210000 	.word	0x10210000
 8001458:	10120000 	.word	0x10120000
 800145c:	10110000 	.word	0x10110000
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000
 8001468:	40010800 	.word	0x40010800
 800146c:	40010c00 	.word	0x40010c00
 8001470:	40011000 	.word	0x40011000
 8001474:	40011400 	.word	0x40011400
 8001478:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <HAL_GPIO_Init+0x304>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	43db      	mvns	r3, r3
 8001484:	4909      	ldr	r1, [pc, #36]	@ (80014ac <HAL_GPIO_Init+0x304>)
 8001486:	4013      	ands	r3, r2
 8001488:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800148a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148c:	3301      	adds	r3, #1
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	fa22 f303 	lsr.w	r3, r2, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	f47f ae8e 	bne.w	80011bc <HAL_GPIO_Init+0x14>
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	372c      	adds	r7, #44	@ 0x2c
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40010400 	.word	0x40010400

080014b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c0:	787b      	ldrb	r3, [r7, #1]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014cc:	e003      	b.n	80014d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	041a      	lsls	r2, r3, #16
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	611a      	str	r2, [r3, #16]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4013      	ands	r3, r2
 80014f8:	041a      	lsls	r2, r3, #16
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43d9      	mvns	r1, r3
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	400b      	ands	r3, r1
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	611a      	str	r2, [r3, #16]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
	...

08001514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e272      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8087 	beq.w	8001642 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001534:	4b92      	ldr	r3, [pc, #584]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b04      	cmp	r3, #4
 800153e:	d00c      	beq.n	800155a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001540:	4b8f      	ldr	r3, [pc, #572]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b08      	cmp	r3, #8
 800154a:	d112      	bne.n	8001572 <HAL_RCC_OscConfig+0x5e>
 800154c:	4b8c      	ldr	r3, [pc, #560]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001558:	d10b      	bne.n	8001572 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155a:	4b89      	ldr	r3, [pc, #548]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d06c      	beq.n	8001640 <HAL_RCC_OscConfig+0x12c>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d168      	bne.n	8001640 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e24c      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800157a:	d106      	bne.n	800158a <HAL_RCC_OscConfig+0x76>
 800157c:	4b80      	ldr	r3, [pc, #512]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a7f      	ldr	r2, [pc, #508]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 8001582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e02e      	b.n	80015e8 <HAL_RCC_OscConfig+0xd4>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x98>
 8001592:	4b7b      	ldr	r3, [pc, #492]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a7a      	ldr	r2, [pc, #488]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 8001598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b78      	ldr	r3, [pc, #480]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a77      	ldr	r2, [pc, #476]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e01d      	b.n	80015e8 <HAL_RCC_OscConfig+0xd4>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0xbc>
 80015b6:	4b72      	ldr	r3, [pc, #456]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a71      	ldr	r2, [pc, #452]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0xd4>
 80015d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b68      	ldr	r3, [pc, #416]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a67      	ldr	r2, [pc, #412]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fac8 	bl	8000b84 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fac4 	bl	8000b84 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	@ 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e200      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	4b5d      	ldr	r3, [pc, #372]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0xe4>
 8001616:	e014      	b.n	8001642 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fab4 	bl	8000b84 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fab0 	bl	8000b84 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	@ 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e1ec      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	4b53      	ldr	r3, [pc, #332]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x10c>
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d063      	beq.n	8001716 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800164e:	4b4c      	ldr	r3, [pc, #304]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800165a:	4b49      	ldr	r3, [pc, #292]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b08      	cmp	r3, #8
 8001664:	d11c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x18c>
 8001666:	4b46      	ldr	r3, [pc, #280]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d116      	bne.n	80016a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	4b43      	ldr	r3, [pc, #268]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_RCC_OscConfig+0x176>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d001      	beq.n	800168a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e1c0      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	4b3d      	ldr	r3, [pc, #244]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4939      	ldr	r1, [pc, #228]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	e03a      	b.n	8001716 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a8:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fa69 	bl	8000b84 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b6:	f7ff fa65 	bl	8000b84 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1a1      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4927      	ldr	r1, [pc, #156]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
 80016e8:	e015      	b.n	8001716 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ea:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fa48 	bl	8000b84 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f8:	f7ff fa44 	bl	8000b84 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e180      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	4b1d      	ldr	r3, [pc, #116]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d03a      	beq.n	8001798 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d019      	beq.n	800175e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172a:	4b17      	ldr	r3, [pc, #92]	@ (8001788 <HAL_RCC_OscConfig+0x274>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7ff fa28 	bl	8000b84 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff fa24 	bl	8000b84 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e160      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <HAL_RCC_OscConfig+0x26c>)
 800174c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001756:	2001      	movs	r0, #1
 8001758:	f000 face 	bl	8001cf8 <RCC_Delay>
 800175c:	e01c      	b.n	8001798 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175e:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <HAL_RCC_OscConfig+0x274>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001764:	f7ff fa0e 	bl	8000b84 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176a:	e00f      	b.n	800178c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176c:	f7ff fa0a 	bl	8000b84 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d908      	bls.n	800178c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e146      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	42420000 	.word	0x42420000
 8001788:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178c:	4b92      	ldr	r3, [pc, #584]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1e9      	bne.n	800176c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80a6 	beq.w	80018f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017aa:	4b8b      	ldr	r3, [pc, #556]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10d      	bne.n	80017d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b88      	ldr	r3, [pc, #544]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	4a87      	ldr	r2, [pc, #540]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	61d3      	str	r3, [r2, #28]
 80017c2:	4b85      	ldr	r3, [pc, #532]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ce:	2301      	movs	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d2:	4b82      	ldr	r3, [pc, #520]	@ (80019dc <HAL_RCC_OscConfig+0x4c8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d118      	bne.n	8001810 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017de:	4b7f      	ldr	r3, [pc, #508]	@ (80019dc <HAL_RCC_OscConfig+0x4c8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a7e      	ldr	r2, [pc, #504]	@ (80019dc <HAL_RCC_OscConfig+0x4c8>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ea:	f7ff f9cb 	bl	8000b84 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f2:	f7ff f9c7 	bl	8000b84 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b64      	cmp	r3, #100	@ 0x64
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e103      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	4b75      	ldr	r3, [pc, #468]	@ (80019dc <HAL_RCC_OscConfig+0x4c8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x312>
 8001818:	4b6f      	ldr	r3, [pc, #444]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4a6e      	ldr	r2, [pc, #440]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6213      	str	r3, [r2, #32]
 8001824:	e02d      	b.n	8001882 <HAL_RCC_OscConfig+0x36e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x334>
 800182e:	4b6a      	ldr	r3, [pc, #424]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4a69      	ldr	r2, [pc, #420]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	6213      	str	r3, [r2, #32]
 800183a:	4b67      	ldr	r3, [pc, #412]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4a66      	ldr	r2, [pc, #408]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	f023 0304 	bic.w	r3, r3, #4
 8001844:	6213      	str	r3, [r2, #32]
 8001846:	e01c      	b.n	8001882 <HAL_RCC_OscConfig+0x36e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b05      	cmp	r3, #5
 800184e:	d10c      	bne.n	800186a <HAL_RCC_OscConfig+0x356>
 8001850:	4b61      	ldr	r3, [pc, #388]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4a60      	ldr	r2, [pc, #384]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6213      	str	r3, [r2, #32]
 800185c:	4b5e      	ldr	r3, [pc, #376]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4a5d      	ldr	r2, [pc, #372]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6213      	str	r3, [r2, #32]
 8001868:	e00b      	b.n	8001882 <HAL_RCC_OscConfig+0x36e>
 800186a:	4b5b      	ldr	r3, [pc, #364]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4a5a      	ldr	r2, [pc, #360]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	6213      	str	r3, [r2, #32]
 8001876:	4b58      	ldr	r3, [pc, #352]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	4a57      	ldr	r2, [pc, #348]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	f023 0304 	bic.w	r3, r3, #4
 8001880:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d015      	beq.n	80018b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188a:	f7ff f97b 	bl	8000b84 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7ff f977 	bl	8000b84 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e0b1      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a8:	4b4b      	ldr	r3, [pc, #300]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0ee      	beq.n	8001892 <HAL_RCC_OscConfig+0x37e>
 80018b4:	e014      	b.n	80018e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b6:	f7ff f965 	bl	8000b84 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff f961 	bl	8000b84 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e09b      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d4:	4b40      	ldr	r3, [pc, #256]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1ee      	bne.n	80018be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d105      	bne.n	80018f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e6:	4b3c      	ldr	r3, [pc, #240]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a3b      	ldr	r2, [pc, #236]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8087 	beq.w	8001a0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018fc:	4b36      	ldr	r3, [pc, #216]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d061      	beq.n	80019cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d146      	bne.n	800199e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001910:	4b33      	ldr	r3, [pc, #204]	@ (80019e0 <HAL_RCC_OscConfig+0x4cc>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7ff f935 	bl	8000b84 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff f931 	bl	8000b84 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e06d      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001930:	4b29      	ldr	r3, [pc, #164]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001944:	d108      	bne.n	8001958 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001946:	4b24      	ldr	r3, [pc, #144]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	4921      	ldr	r1, [pc, #132]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001958:	4b1f      	ldr	r3, [pc, #124]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a19      	ldr	r1, [r3, #32]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	430b      	orrs	r3, r1
 800196a:	491b      	ldr	r1, [pc, #108]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001970:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <HAL_RCC_OscConfig+0x4cc>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff f905 	bl	8000b84 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff f901 	bl	8000b84 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e03d      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x46a>
 800199c:	e035      	b.n	8001a0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <HAL_RCC_OscConfig+0x4cc>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff f8ee 	bl	8000b84 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff f8ea 	bl	8000b84 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e026      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x498>
 80019ca:	e01e      	b.n	8001a0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e019      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40007000 	.word	0x40007000
 80019e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <HAL_RCC_OscConfig+0x500>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0d0      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d910      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b67      	ldr	r3, [pc, #412]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 0207 	bic.w	r2, r3, #7
 8001a42:	4965      	ldr	r1, [pc, #404]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b63      	ldr	r3, [pc, #396]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0b8      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d020      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a74:	4b59      	ldr	r3, [pc, #356]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a58      	ldr	r2, [pc, #352]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a8c:	4b53      	ldr	r3, [pc, #332]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4a52      	ldr	r2, [pc, #328]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a98:	4b50      	ldr	r3, [pc, #320]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	494d      	ldr	r1, [pc, #308]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d040      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b47      	ldr	r3, [pc, #284]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d115      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e07f      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad6:	4b41      	ldr	r3, [pc, #260]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e073      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e06b      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af6:	4b39      	ldr	r3, [pc, #228]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f023 0203 	bic.w	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4936      	ldr	r1, [pc, #216]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b08:	f7ff f83c 	bl	8000b84 <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7ff f838 	bl	8000b84 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e053      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	4b2d      	ldr	r3, [pc, #180]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 020c 	and.w	r2, r3, #12
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1eb      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b38:	4b27      	ldr	r3, [pc, #156]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d210      	bcs.n	8001b68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b24      	ldr	r3, [pc, #144]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 0207 	bic.w	r2, r3, #7
 8001b4e:	4922      	ldr	r1, [pc, #136]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e032      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b74:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4916      	ldr	r1, [pc, #88]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d009      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b92:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	490e      	ldr	r1, [pc, #56]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ba6:	f000 f821 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001baa:	4602      	mov	r2, r0
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	490a      	ldr	r1, [pc, #40]	@ (8001be0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb8:	5ccb      	ldrb	r3, [r1, r3]
 8001bba:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbe:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <HAL_RCC_ClockConfig+0x1cc>)
 8001bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_RCC_ClockConfig+0x1d0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe ff9a 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	080033a0 	.word	0x080033a0
 8001be4:	20000004 	.word	0x20000004
 8001be8:	20000008 	.word	0x20000008

08001bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x30>
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x36>
 8001c1a:	e027      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c1e:	613b      	str	r3, [r7, #16]
      break;
 8001c20:	e027      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	0c9b      	lsrs	r3, r3, #18
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	4a17      	ldr	r2, [pc, #92]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c2c:	5cd3      	ldrb	r3, [r2, r3]
 8001c2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d010      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	0c5b      	lsrs	r3, r3, #17
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	4a11      	ldr	r2, [pc, #68]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c4e:	fb03 f202 	mul.w	r2, r3, r2
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e004      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	613b      	str	r3, [r7, #16]
      break;
 8001c6a:	e002      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c6e:	613b      	str	r3, [r7, #16]
      break;
 8001c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c72:	693b      	ldr	r3, [r7, #16]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
 8001c84:	007a1200 	.word	0x007a1200
 8001c88:	080033b8 	.word	0x080033b8
 8001c8c:	080033c8 	.word	0x080033c8
 8001c90:	003d0900 	.word	0x003d0900

08001c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b02      	ldr	r3, [pc, #8]	@ (8001ca4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	20000004 	.word	0x20000004

08001ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cac:	f7ff fff2 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	4903      	ldr	r1, [pc, #12]	@ (8001ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cbe:	5ccb      	ldrb	r3, [r1, r3]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	080033b0 	.word	0x080033b0

08001cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd4:	f7ff ffde 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	0adb      	lsrs	r3, r3, #11
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	@ (8001cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	080033b0 	.word	0x080033b0

08001cf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d00:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <RCC_Delay+0x34>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <RCC_Delay+0x38>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0a5b      	lsrs	r3, r3, #9
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d14:	bf00      	nop
  }
  while (Delay --);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1e5a      	subs	r2, r3, #1
 8001d1a:	60fa      	str	r2, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f9      	bne.n	8001d14 <RCC_Delay+0x1c>
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	10624dd3 	.word	0x10624dd3

08001d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e042      	b.n	8001dcc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7fe fd3e 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2224      	movs	r2, #36	@ 0x24
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 fa09 	bl	8002190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	@ 0x28
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	4613      	mov	r3, r2
 8001de2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d175      	bne.n	8001ee0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <HAL_UART_Transmit+0x2c>
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e06e      	b.n	8001ee2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2221      	movs	r2, #33	@ 0x21
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e12:	f7fe feb7 	bl	8000b84 <HAL_GetTick>
 8001e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	88fa      	ldrh	r2, [r7, #6]
 8001e1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	88fa      	ldrh	r2, [r7, #6]
 8001e22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e2c:	d108      	bne.n	8001e40 <HAL_UART_Transmit+0x6c>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d104      	bne.n	8001e40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	e003      	b.n	8001e48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e48:	e02e      	b.n	8001ea8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2200      	movs	r2, #0
 8001e52:	2180      	movs	r1, #128	@ 0x80
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 f8df 	bl	8002018 <UART_WaitOnFlagUntilTimeout>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e03a      	b.n	8001ee2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10b      	bne.n	8001e8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	3302      	adds	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	e007      	b.n	8001e9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	3301      	adds	r3, #1
 8001e98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1cb      	bne.n	8001e4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2140      	movs	r1, #64	@ 0x40
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f8ab 	bl	8002018 <UART_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e006      	b.n	8001ee2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	e000      	b.n	8001ee2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ee0:	2302      	movs	r3, #2
  }
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b08a      	sub	sp, #40	@ 0x28
 8001eee:	af02      	add	r7, sp, #8
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	f040 8081 	bne.w	800200e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <HAL_UART_Receive+0x2e>
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e079      	b.n	8002010 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2222      	movs	r2, #34	@ 0x22
 8001f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f30:	f7fe fe28 	bl	8000b84 <HAL_GetTick>
 8001f34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	88fa      	ldrh	r2, [r7, #6]
 8001f3a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	88fa      	ldrh	r2, [r7, #6]
 8001f40:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f4a:	d108      	bne.n	8001f5e <HAL_UART_Receive+0x74>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d104      	bne.n	8001f5e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e003      	b.n	8001f66 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001f66:	e047      	b.n	8001ff8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2120      	movs	r1, #32
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f850 	bl	8002018 <UART_WaitOnFlagUntilTimeout>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e042      	b.n	8002010 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10c      	bne.n	8001faa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	e01f      	b.n	8001fea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fb2:	d007      	beq.n	8001fc4 <HAL_UART_Receive+0xda>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10a      	bne.n	8001fd2 <HAL_UART_Receive+0xe8>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d106      	bne.n	8001fd2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	e008      	b.n	8001fe4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1b2      	bne.n	8001f68 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2220      	movs	r2, #32
 8002006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800200e:	2302      	movs	r3, #2
  }
}
 8002010:	4618      	mov	r0, r3
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	4613      	mov	r3, r2
 8002026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002028:	e03b      	b.n	80020a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d037      	beq.n	80020a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002032:	f7fe fda7 	bl	8000b84 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	6a3a      	ldr	r2, [r7, #32]
 800203e:	429a      	cmp	r2, r3
 8002040:	d302      	bcc.n	8002048 <UART_WaitOnFlagUntilTimeout+0x30>
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e03a      	b.n	80020c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d023      	beq.n	80020a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b80      	cmp	r3, #128	@ 0x80
 800205e:	d020      	beq.n	80020a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b40      	cmp	r3, #64	@ 0x40
 8002064:	d01d      	beq.n	80020a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b08      	cmp	r3, #8
 8002072:	d116      	bne.n	80020a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f81d 	bl	80020ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2208      	movs	r2, #8
 8002094:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4013      	ands	r3, r2
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	bf0c      	ite	eq
 80020b2:	2301      	moveq	r3, #1
 80020b4:	2300      	movne	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d0b4      	beq.n	800202a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b095      	sub	sp, #84	@ 0x54
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	330c      	adds	r3, #12
 80020d8:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020dc:	e853 3f00 	ldrex	r3, [r3]
 80020e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80020e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	330c      	adds	r3, #12
 80020f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80020f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80020f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80020fa:	e841 2300 	strex	r3, r2, [r1]
 80020fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1e5      	bne.n	80020d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3314      	adds	r3, #20
 800210c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	e853 3f00 	ldrex	r3, [r3]
 8002114:	61fb      	str	r3, [r7, #28]
   return(result);
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3314      	adds	r3, #20
 8002124:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002126:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002128:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800212c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800212e:	e841 2300 	strex	r3, r2, [r1]
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1e5      	bne.n	8002106 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	2b01      	cmp	r3, #1
 8002140:	d119      	bne.n	8002176 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	330c      	adds	r3, #12
 8002148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	e853 3f00 	ldrex	r3, [r3]
 8002150:	60bb      	str	r3, [r7, #8]
   return(result);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f023 0310 	bic.w	r3, r3, #16
 8002158:	647b      	str	r3, [r7, #68]	@ 0x44
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	330c      	adds	r3, #12
 8002160:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002162:	61ba      	str	r2, [r7, #24]
 8002164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002166:	6979      	ldr	r1, [r7, #20]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	e841 2300 	strex	r3, r2, [r1]
 800216e:	613b      	str	r3, [r7, #16]
   return(result);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1e5      	bne.n	8002142 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002184:	bf00      	nop
 8002186:	3754      	adds	r7, #84	@ 0x54
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
	...

08002190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80021ca:	f023 030c 	bic.w	r3, r3, #12
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699a      	ldr	r2, [r3, #24]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2c      	ldr	r2, [pc, #176]	@ (80022a4 <UART_SetConfig+0x114>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d103      	bne.n	8002200 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021f8:	f7ff fd6a 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	e002      	b.n	8002206 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002200:	f7ff fd52 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8002204:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	009a      	lsls	r2, r3, #2
 8002210:	441a      	add	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	4a22      	ldr	r2, [pc, #136]	@ (80022a8 <UART_SetConfig+0x118>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	0119      	lsls	r1, r3, #4
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	009a      	lsls	r2, r3, #2
 8002230:	441a      	add	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	fbb2 f2f3 	udiv	r2, r2, r3
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <UART_SetConfig+0x118>)
 800223e:	fba3 0302 	umull	r0, r3, r3, r2
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2064      	movs	r0, #100	@ 0x64
 8002246:	fb00 f303 	mul.w	r3, r0, r3
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	3332      	adds	r3, #50	@ 0x32
 8002250:	4a15      	ldr	r2, [pc, #84]	@ (80022a8 <UART_SetConfig+0x118>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800225c:	4419      	add	r1, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	009a      	lsls	r2, r3, #2
 8002268:	441a      	add	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	fbb2 f2f3 	udiv	r2, r2, r3
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <UART_SetConfig+0x118>)
 8002276:	fba3 0302 	umull	r0, r3, r3, r2
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2064      	movs	r0, #100	@ 0x64
 800227e:	fb00 f303 	mul.w	r3, r0, r3
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	3332      	adds	r3, #50	@ 0x32
 8002288:	4a07      	ldr	r2, [pc, #28]	@ (80022a8 <UART_SetConfig+0x118>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	f003 020f 	and.w	r2, r3, #15
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	440a      	add	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40013800 	.word	0x40013800
 80022a8:	51eb851f 	.word	0x51eb851f

080022ac <std>:
 80022ac:	2300      	movs	r3, #0
 80022ae:	b510      	push	{r4, lr}
 80022b0:	4604      	mov	r4, r0
 80022b2:	e9c0 3300 	strd	r3, r3, [r0]
 80022b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022ba:	6083      	str	r3, [r0, #8]
 80022bc:	8181      	strh	r1, [r0, #12]
 80022be:	6643      	str	r3, [r0, #100]	@ 0x64
 80022c0:	81c2      	strh	r2, [r0, #14]
 80022c2:	6183      	str	r3, [r0, #24]
 80022c4:	4619      	mov	r1, r3
 80022c6:	2208      	movs	r2, #8
 80022c8:	305c      	adds	r0, #92	@ 0x5c
 80022ca:	f000 f9f9 	bl	80026c0 <memset>
 80022ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <std+0x58>)
 80022d0:	6224      	str	r4, [r4, #32]
 80022d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <std+0x5c>)
 80022d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <std+0x60>)
 80022da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <std+0x64>)
 80022de:	6323      	str	r3, [r4, #48]	@ 0x30
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <std+0x68>)
 80022e2:	429c      	cmp	r4, r3
 80022e4:	d006      	beq.n	80022f4 <std+0x48>
 80022e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80022ea:	4294      	cmp	r4, r2
 80022ec:	d002      	beq.n	80022f4 <std+0x48>
 80022ee:	33d0      	adds	r3, #208	@ 0xd0
 80022f0:	429c      	cmp	r4, r3
 80022f2:	d105      	bne.n	8002300 <std+0x54>
 80022f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80022f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022fc:	f000 ba58 	b.w	80027b0 <__retarget_lock_init_recursive>
 8002300:	bd10      	pop	{r4, pc}
 8002302:	bf00      	nop
 8002304:	08002511 	.word	0x08002511
 8002308:	08002533 	.word	0x08002533
 800230c:	0800256b 	.word	0x0800256b
 8002310:	0800258f 	.word	0x0800258f
 8002314:	20000148 	.word	0x20000148

08002318 <stdio_exit_handler>:
 8002318:	4a02      	ldr	r2, [pc, #8]	@ (8002324 <stdio_exit_handler+0xc>)
 800231a:	4903      	ldr	r1, [pc, #12]	@ (8002328 <stdio_exit_handler+0x10>)
 800231c:	4803      	ldr	r0, [pc, #12]	@ (800232c <stdio_exit_handler+0x14>)
 800231e:	f000 b869 	b.w	80023f4 <_fwalk_sglue>
 8002322:	bf00      	nop
 8002324:	20000010 	.word	0x20000010
 8002328:	08003049 	.word	0x08003049
 800232c:	20000020 	.word	0x20000020

08002330 <cleanup_stdio>:
 8002330:	6841      	ldr	r1, [r0, #4]
 8002332:	4b0c      	ldr	r3, [pc, #48]	@ (8002364 <cleanup_stdio+0x34>)
 8002334:	b510      	push	{r4, lr}
 8002336:	4299      	cmp	r1, r3
 8002338:	4604      	mov	r4, r0
 800233a:	d001      	beq.n	8002340 <cleanup_stdio+0x10>
 800233c:	f000 fe84 	bl	8003048 <_fflush_r>
 8002340:	68a1      	ldr	r1, [r4, #8]
 8002342:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <cleanup_stdio+0x38>)
 8002344:	4299      	cmp	r1, r3
 8002346:	d002      	beq.n	800234e <cleanup_stdio+0x1e>
 8002348:	4620      	mov	r0, r4
 800234a:	f000 fe7d 	bl	8003048 <_fflush_r>
 800234e:	68e1      	ldr	r1, [r4, #12]
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <cleanup_stdio+0x3c>)
 8002352:	4299      	cmp	r1, r3
 8002354:	d004      	beq.n	8002360 <cleanup_stdio+0x30>
 8002356:	4620      	mov	r0, r4
 8002358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800235c:	f000 be74 	b.w	8003048 <_fflush_r>
 8002360:	bd10      	pop	{r4, pc}
 8002362:	bf00      	nop
 8002364:	20000148 	.word	0x20000148
 8002368:	200001b0 	.word	0x200001b0
 800236c:	20000218 	.word	0x20000218

08002370 <global_stdio_init.part.0>:
 8002370:	b510      	push	{r4, lr}
 8002372:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <global_stdio_init.part.0+0x30>)
 8002374:	4c0b      	ldr	r4, [pc, #44]	@ (80023a4 <global_stdio_init.part.0+0x34>)
 8002376:	4a0c      	ldr	r2, [pc, #48]	@ (80023a8 <global_stdio_init.part.0+0x38>)
 8002378:	4620      	mov	r0, r4
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	2104      	movs	r1, #4
 800237e:	2200      	movs	r2, #0
 8002380:	f7ff ff94 	bl	80022ac <std>
 8002384:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002388:	2201      	movs	r2, #1
 800238a:	2109      	movs	r1, #9
 800238c:	f7ff ff8e 	bl	80022ac <std>
 8002390:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002394:	2202      	movs	r2, #2
 8002396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800239a:	2112      	movs	r1, #18
 800239c:	f7ff bf86 	b.w	80022ac <std>
 80023a0:	20000280 	.word	0x20000280
 80023a4:	20000148 	.word	0x20000148
 80023a8:	08002319 	.word	0x08002319

080023ac <__sfp_lock_acquire>:
 80023ac:	4801      	ldr	r0, [pc, #4]	@ (80023b4 <__sfp_lock_acquire+0x8>)
 80023ae:	f000 ba00 	b.w	80027b2 <__retarget_lock_acquire_recursive>
 80023b2:	bf00      	nop
 80023b4:	20000289 	.word	0x20000289

080023b8 <__sfp_lock_release>:
 80023b8:	4801      	ldr	r0, [pc, #4]	@ (80023c0 <__sfp_lock_release+0x8>)
 80023ba:	f000 b9fb 	b.w	80027b4 <__retarget_lock_release_recursive>
 80023be:	bf00      	nop
 80023c0:	20000289 	.word	0x20000289

080023c4 <__sinit>:
 80023c4:	b510      	push	{r4, lr}
 80023c6:	4604      	mov	r4, r0
 80023c8:	f7ff fff0 	bl	80023ac <__sfp_lock_acquire>
 80023cc:	6a23      	ldr	r3, [r4, #32]
 80023ce:	b11b      	cbz	r3, 80023d8 <__sinit+0x14>
 80023d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023d4:	f7ff bff0 	b.w	80023b8 <__sfp_lock_release>
 80023d8:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <__sinit+0x28>)
 80023da:	6223      	str	r3, [r4, #32]
 80023dc:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <__sinit+0x2c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f5      	bne.n	80023d0 <__sinit+0xc>
 80023e4:	f7ff ffc4 	bl	8002370 <global_stdio_init.part.0>
 80023e8:	e7f2      	b.n	80023d0 <__sinit+0xc>
 80023ea:	bf00      	nop
 80023ec:	08002331 	.word	0x08002331
 80023f0:	20000280 	.word	0x20000280

080023f4 <_fwalk_sglue>:
 80023f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023f8:	4607      	mov	r7, r0
 80023fa:	4688      	mov	r8, r1
 80023fc:	4614      	mov	r4, r2
 80023fe:	2600      	movs	r6, #0
 8002400:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002404:	f1b9 0901 	subs.w	r9, r9, #1
 8002408:	d505      	bpl.n	8002416 <_fwalk_sglue+0x22>
 800240a:	6824      	ldr	r4, [r4, #0]
 800240c:	2c00      	cmp	r4, #0
 800240e:	d1f7      	bne.n	8002400 <_fwalk_sglue+0xc>
 8002410:	4630      	mov	r0, r6
 8002412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002416:	89ab      	ldrh	r3, [r5, #12]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d907      	bls.n	800242c <_fwalk_sglue+0x38>
 800241c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002420:	3301      	adds	r3, #1
 8002422:	d003      	beq.n	800242c <_fwalk_sglue+0x38>
 8002424:	4629      	mov	r1, r5
 8002426:	4638      	mov	r0, r7
 8002428:	47c0      	blx	r8
 800242a:	4306      	orrs	r6, r0
 800242c:	3568      	adds	r5, #104	@ 0x68
 800242e:	e7e9      	b.n	8002404 <_fwalk_sglue+0x10>

08002430 <iprintf>:
 8002430:	b40f      	push	{r0, r1, r2, r3}
 8002432:	b507      	push	{r0, r1, r2, lr}
 8002434:	4906      	ldr	r1, [pc, #24]	@ (8002450 <iprintf+0x20>)
 8002436:	ab04      	add	r3, sp, #16
 8002438:	6808      	ldr	r0, [r1, #0]
 800243a:	f853 2b04 	ldr.w	r2, [r3], #4
 800243e:	6881      	ldr	r1, [r0, #8]
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	f000 fad7 	bl	80029f4 <_vfiprintf_r>
 8002446:	b003      	add	sp, #12
 8002448:	f85d eb04 	ldr.w	lr, [sp], #4
 800244c:	b004      	add	sp, #16
 800244e:	4770      	bx	lr
 8002450:	2000001c 	.word	0x2000001c

08002454 <_puts_r>:
 8002454:	6a03      	ldr	r3, [r0, #32]
 8002456:	b570      	push	{r4, r5, r6, lr}
 8002458:	4605      	mov	r5, r0
 800245a:	460e      	mov	r6, r1
 800245c:	6884      	ldr	r4, [r0, #8]
 800245e:	b90b      	cbnz	r3, 8002464 <_puts_r+0x10>
 8002460:	f7ff ffb0 	bl	80023c4 <__sinit>
 8002464:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002466:	07db      	lsls	r3, r3, #31
 8002468:	d405      	bmi.n	8002476 <_puts_r+0x22>
 800246a:	89a3      	ldrh	r3, [r4, #12]
 800246c:	0598      	lsls	r0, r3, #22
 800246e:	d402      	bmi.n	8002476 <_puts_r+0x22>
 8002470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002472:	f000 f99e 	bl	80027b2 <__retarget_lock_acquire_recursive>
 8002476:	89a3      	ldrh	r3, [r4, #12]
 8002478:	0719      	lsls	r1, r3, #28
 800247a:	d502      	bpl.n	8002482 <_puts_r+0x2e>
 800247c:	6923      	ldr	r3, [r4, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d135      	bne.n	80024ee <_puts_r+0x9a>
 8002482:	4621      	mov	r1, r4
 8002484:	4628      	mov	r0, r5
 8002486:	f000 f8c5 	bl	8002614 <__swsetup_r>
 800248a:	b380      	cbz	r0, 80024ee <_puts_r+0x9a>
 800248c:	f04f 35ff 	mov.w	r5, #4294967295
 8002490:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002492:	07da      	lsls	r2, r3, #31
 8002494:	d405      	bmi.n	80024a2 <_puts_r+0x4e>
 8002496:	89a3      	ldrh	r3, [r4, #12]
 8002498:	059b      	lsls	r3, r3, #22
 800249a:	d402      	bmi.n	80024a2 <_puts_r+0x4e>
 800249c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800249e:	f000 f989 	bl	80027b4 <__retarget_lock_release_recursive>
 80024a2:	4628      	mov	r0, r5
 80024a4:	bd70      	pop	{r4, r5, r6, pc}
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	da04      	bge.n	80024b4 <_puts_r+0x60>
 80024aa:	69a2      	ldr	r2, [r4, #24]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	dc17      	bgt.n	80024e0 <_puts_r+0x8c>
 80024b0:	290a      	cmp	r1, #10
 80024b2:	d015      	beq.n	80024e0 <_puts_r+0x8c>
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	6022      	str	r2, [r4, #0]
 80024ba:	7019      	strb	r1, [r3, #0]
 80024bc:	68a3      	ldr	r3, [r4, #8]
 80024be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80024c2:	3b01      	subs	r3, #1
 80024c4:	60a3      	str	r3, [r4, #8]
 80024c6:	2900      	cmp	r1, #0
 80024c8:	d1ed      	bne.n	80024a6 <_puts_r+0x52>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	da11      	bge.n	80024f2 <_puts_r+0x9e>
 80024ce:	4622      	mov	r2, r4
 80024d0:	210a      	movs	r1, #10
 80024d2:	4628      	mov	r0, r5
 80024d4:	f000 f85f 	bl	8002596 <__swbuf_r>
 80024d8:	3001      	adds	r0, #1
 80024da:	d0d7      	beq.n	800248c <_puts_r+0x38>
 80024dc:	250a      	movs	r5, #10
 80024de:	e7d7      	b.n	8002490 <_puts_r+0x3c>
 80024e0:	4622      	mov	r2, r4
 80024e2:	4628      	mov	r0, r5
 80024e4:	f000 f857 	bl	8002596 <__swbuf_r>
 80024e8:	3001      	adds	r0, #1
 80024ea:	d1e7      	bne.n	80024bc <_puts_r+0x68>
 80024ec:	e7ce      	b.n	800248c <_puts_r+0x38>
 80024ee:	3e01      	subs	r6, #1
 80024f0:	e7e4      	b.n	80024bc <_puts_r+0x68>
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	6022      	str	r2, [r4, #0]
 80024f8:	220a      	movs	r2, #10
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e7ee      	b.n	80024dc <_puts_r+0x88>
	...

08002500 <puts>:
 8002500:	4b02      	ldr	r3, [pc, #8]	@ (800250c <puts+0xc>)
 8002502:	4601      	mov	r1, r0
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	f7ff bfa5 	b.w	8002454 <_puts_r>
 800250a:	bf00      	nop
 800250c:	2000001c 	.word	0x2000001c

08002510 <__sread>:
 8002510:	b510      	push	{r4, lr}
 8002512:	460c      	mov	r4, r1
 8002514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002518:	f000 f8fc 	bl	8002714 <_read_r>
 800251c:	2800      	cmp	r0, #0
 800251e:	bfab      	itete	ge
 8002520:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002522:	89a3      	ldrhlt	r3, [r4, #12]
 8002524:	181b      	addge	r3, r3, r0
 8002526:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800252a:	bfac      	ite	ge
 800252c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800252e:	81a3      	strhlt	r3, [r4, #12]
 8002530:	bd10      	pop	{r4, pc}

08002532 <__swrite>:
 8002532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002536:	461f      	mov	r7, r3
 8002538:	898b      	ldrh	r3, [r1, #12]
 800253a:	4605      	mov	r5, r0
 800253c:	05db      	lsls	r3, r3, #23
 800253e:	460c      	mov	r4, r1
 8002540:	4616      	mov	r6, r2
 8002542:	d505      	bpl.n	8002550 <__swrite+0x1e>
 8002544:	2302      	movs	r3, #2
 8002546:	2200      	movs	r2, #0
 8002548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800254c:	f000 f8d0 	bl	80026f0 <_lseek_r>
 8002550:	89a3      	ldrh	r3, [r4, #12]
 8002552:	4632      	mov	r2, r6
 8002554:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002558:	81a3      	strh	r3, [r4, #12]
 800255a:	4628      	mov	r0, r5
 800255c:	463b      	mov	r3, r7
 800255e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002566:	f000 b8e7 	b.w	8002738 <_write_r>

0800256a <__sseek>:
 800256a:	b510      	push	{r4, lr}
 800256c:	460c      	mov	r4, r1
 800256e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002572:	f000 f8bd 	bl	80026f0 <_lseek_r>
 8002576:	1c43      	adds	r3, r0, #1
 8002578:	89a3      	ldrh	r3, [r4, #12]
 800257a:	bf15      	itete	ne
 800257c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800257e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002582:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002586:	81a3      	strheq	r3, [r4, #12]
 8002588:	bf18      	it	ne
 800258a:	81a3      	strhne	r3, [r4, #12]
 800258c:	bd10      	pop	{r4, pc}

0800258e <__sclose>:
 800258e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002592:	f000 b89d 	b.w	80026d0 <_close_r>

08002596 <__swbuf_r>:
 8002596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002598:	460e      	mov	r6, r1
 800259a:	4614      	mov	r4, r2
 800259c:	4605      	mov	r5, r0
 800259e:	b118      	cbz	r0, 80025a8 <__swbuf_r+0x12>
 80025a0:	6a03      	ldr	r3, [r0, #32]
 80025a2:	b90b      	cbnz	r3, 80025a8 <__swbuf_r+0x12>
 80025a4:	f7ff ff0e 	bl	80023c4 <__sinit>
 80025a8:	69a3      	ldr	r3, [r4, #24]
 80025aa:	60a3      	str	r3, [r4, #8]
 80025ac:	89a3      	ldrh	r3, [r4, #12]
 80025ae:	071a      	lsls	r2, r3, #28
 80025b0:	d501      	bpl.n	80025b6 <__swbuf_r+0x20>
 80025b2:	6923      	ldr	r3, [r4, #16]
 80025b4:	b943      	cbnz	r3, 80025c8 <__swbuf_r+0x32>
 80025b6:	4621      	mov	r1, r4
 80025b8:	4628      	mov	r0, r5
 80025ba:	f000 f82b 	bl	8002614 <__swsetup_r>
 80025be:	b118      	cbz	r0, 80025c8 <__swbuf_r+0x32>
 80025c0:	f04f 37ff 	mov.w	r7, #4294967295
 80025c4:	4638      	mov	r0, r7
 80025c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	6922      	ldr	r2, [r4, #16]
 80025cc:	b2f6      	uxtb	r6, r6
 80025ce:	1a98      	subs	r0, r3, r2
 80025d0:	6963      	ldr	r3, [r4, #20]
 80025d2:	4637      	mov	r7, r6
 80025d4:	4283      	cmp	r3, r0
 80025d6:	dc05      	bgt.n	80025e4 <__swbuf_r+0x4e>
 80025d8:	4621      	mov	r1, r4
 80025da:	4628      	mov	r0, r5
 80025dc:	f000 fd34 	bl	8003048 <_fflush_r>
 80025e0:	2800      	cmp	r0, #0
 80025e2:	d1ed      	bne.n	80025c0 <__swbuf_r+0x2a>
 80025e4:	68a3      	ldr	r3, [r4, #8]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	60a3      	str	r3, [r4, #8]
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	6022      	str	r2, [r4, #0]
 80025f0:	701e      	strb	r6, [r3, #0]
 80025f2:	6962      	ldr	r2, [r4, #20]
 80025f4:	1c43      	adds	r3, r0, #1
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d004      	beq.n	8002604 <__swbuf_r+0x6e>
 80025fa:	89a3      	ldrh	r3, [r4, #12]
 80025fc:	07db      	lsls	r3, r3, #31
 80025fe:	d5e1      	bpl.n	80025c4 <__swbuf_r+0x2e>
 8002600:	2e0a      	cmp	r6, #10
 8002602:	d1df      	bne.n	80025c4 <__swbuf_r+0x2e>
 8002604:	4621      	mov	r1, r4
 8002606:	4628      	mov	r0, r5
 8002608:	f000 fd1e 	bl	8003048 <_fflush_r>
 800260c:	2800      	cmp	r0, #0
 800260e:	d0d9      	beq.n	80025c4 <__swbuf_r+0x2e>
 8002610:	e7d6      	b.n	80025c0 <__swbuf_r+0x2a>
	...

08002614 <__swsetup_r>:
 8002614:	b538      	push	{r3, r4, r5, lr}
 8002616:	4b29      	ldr	r3, [pc, #164]	@ (80026bc <__swsetup_r+0xa8>)
 8002618:	4605      	mov	r5, r0
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	460c      	mov	r4, r1
 800261e:	b118      	cbz	r0, 8002628 <__swsetup_r+0x14>
 8002620:	6a03      	ldr	r3, [r0, #32]
 8002622:	b90b      	cbnz	r3, 8002628 <__swsetup_r+0x14>
 8002624:	f7ff fece 	bl	80023c4 <__sinit>
 8002628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800262c:	0719      	lsls	r1, r3, #28
 800262e:	d422      	bmi.n	8002676 <__swsetup_r+0x62>
 8002630:	06da      	lsls	r2, r3, #27
 8002632:	d407      	bmi.n	8002644 <__swsetup_r+0x30>
 8002634:	2209      	movs	r2, #9
 8002636:	602a      	str	r2, [r5, #0]
 8002638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	81a3      	strh	r3, [r4, #12]
 8002642:	e033      	b.n	80026ac <__swsetup_r+0x98>
 8002644:	0758      	lsls	r0, r3, #29
 8002646:	d512      	bpl.n	800266e <__swsetup_r+0x5a>
 8002648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800264a:	b141      	cbz	r1, 800265e <__swsetup_r+0x4a>
 800264c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002650:	4299      	cmp	r1, r3
 8002652:	d002      	beq.n	800265a <__swsetup_r+0x46>
 8002654:	4628      	mov	r0, r5
 8002656:	f000 f8af 	bl	80027b8 <_free_r>
 800265a:	2300      	movs	r3, #0
 800265c:	6363      	str	r3, [r4, #52]	@ 0x34
 800265e:	89a3      	ldrh	r3, [r4, #12]
 8002660:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002664:	81a3      	strh	r3, [r4, #12]
 8002666:	2300      	movs	r3, #0
 8002668:	6063      	str	r3, [r4, #4]
 800266a:	6923      	ldr	r3, [r4, #16]
 800266c:	6023      	str	r3, [r4, #0]
 800266e:	89a3      	ldrh	r3, [r4, #12]
 8002670:	f043 0308 	orr.w	r3, r3, #8
 8002674:	81a3      	strh	r3, [r4, #12]
 8002676:	6923      	ldr	r3, [r4, #16]
 8002678:	b94b      	cbnz	r3, 800268e <__swsetup_r+0x7a>
 800267a:	89a3      	ldrh	r3, [r4, #12]
 800267c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002684:	d003      	beq.n	800268e <__swsetup_r+0x7a>
 8002686:	4621      	mov	r1, r4
 8002688:	4628      	mov	r0, r5
 800268a:	f000 fd2a 	bl	80030e2 <__smakebuf_r>
 800268e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002692:	f013 0201 	ands.w	r2, r3, #1
 8002696:	d00a      	beq.n	80026ae <__swsetup_r+0x9a>
 8002698:	2200      	movs	r2, #0
 800269a:	60a2      	str	r2, [r4, #8]
 800269c:	6962      	ldr	r2, [r4, #20]
 800269e:	4252      	negs	r2, r2
 80026a0:	61a2      	str	r2, [r4, #24]
 80026a2:	6922      	ldr	r2, [r4, #16]
 80026a4:	b942      	cbnz	r2, 80026b8 <__swsetup_r+0xa4>
 80026a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80026aa:	d1c5      	bne.n	8002638 <__swsetup_r+0x24>
 80026ac:	bd38      	pop	{r3, r4, r5, pc}
 80026ae:	0799      	lsls	r1, r3, #30
 80026b0:	bf58      	it	pl
 80026b2:	6962      	ldrpl	r2, [r4, #20]
 80026b4:	60a2      	str	r2, [r4, #8]
 80026b6:	e7f4      	b.n	80026a2 <__swsetup_r+0x8e>
 80026b8:	2000      	movs	r0, #0
 80026ba:	e7f7      	b.n	80026ac <__swsetup_r+0x98>
 80026bc:	2000001c 	.word	0x2000001c

080026c0 <memset>:
 80026c0:	4603      	mov	r3, r0
 80026c2:	4402      	add	r2, r0
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d100      	bne.n	80026ca <memset+0xa>
 80026c8:	4770      	bx	lr
 80026ca:	f803 1b01 	strb.w	r1, [r3], #1
 80026ce:	e7f9      	b.n	80026c4 <memset+0x4>

080026d0 <_close_r>:
 80026d0:	b538      	push	{r3, r4, r5, lr}
 80026d2:	2300      	movs	r3, #0
 80026d4:	4d05      	ldr	r5, [pc, #20]	@ (80026ec <_close_r+0x1c>)
 80026d6:	4604      	mov	r4, r0
 80026d8:	4608      	mov	r0, r1
 80026da:	602b      	str	r3, [r5, #0]
 80026dc:	f7fe f967 	bl	80009ae <_close>
 80026e0:	1c43      	adds	r3, r0, #1
 80026e2:	d102      	bne.n	80026ea <_close_r+0x1a>
 80026e4:	682b      	ldr	r3, [r5, #0]
 80026e6:	b103      	cbz	r3, 80026ea <_close_r+0x1a>
 80026e8:	6023      	str	r3, [r4, #0]
 80026ea:	bd38      	pop	{r3, r4, r5, pc}
 80026ec:	20000284 	.word	0x20000284

080026f0 <_lseek_r>:
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	4604      	mov	r4, r0
 80026f4:	4608      	mov	r0, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	2200      	movs	r2, #0
 80026fa:	4d05      	ldr	r5, [pc, #20]	@ (8002710 <_lseek_r+0x20>)
 80026fc:	602a      	str	r2, [r5, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	f7fe f979 	bl	80009f6 <_lseek>
 8002704:	1c43      	adds	r3, r0, #1
 8002706:	d102      	bne.n	800270e <_lseek_r+0x1e>
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	b103      	cbz	r3, 800270e <_lseek_r+0x1e>
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	bd38      	pop	{r3, r4, r5, pc}
 8002710:	20000284 	.word	0x20000284

08002714 <_read_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4604      	mov	r4, r0
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	2200      	movs	r2, #0
 800271e:	4d05      	ldr	r5, [pc, #20]	@ (8002734 <_read_r+0x20>)
 8002720:	602a      	str	r2, [r5, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	f7fe f90a 	bl	800093c <_read>
 8002728:	1c43      	adds	r3, r0, #1
 800272a:	d102      	bne.n	8002732 <_read_r+0x1e>
 800272c:	682b      	ldr	r3, [r5, #0]
 800272e:	b103      	cbz	r3, 8002732 <_read_r+0x1e>
 8002730:	6023      	str	r3, [r4, #0]
 8002732:	bd38      	pop	{r3, r4, r5, pc}
 8002734:	20000284 	.word	0x20000284

08002738 <_write_r>:
 8002738:	b538      	push	{r3, r4, r5, lr}
 800273a:	4604      	mov	r4, r0
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	2200      	movs	r2, #0
 8002742:	4d05      	ldr	r5, [pc, #20]	@ (8002758 <_write_r+0x20>)
 8002744:	602a      	str	r2, [r5, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	f7fe f915 	bl	8000976 <_write>
 800274c:	1c43      	adds	r3, r0, #1
 800274e:	d102      	bne.n	8002756 <_write_r+0x1e>
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	b103      	cbz	r3, 8002756 <_write_r+0x1e>
 8002754:	6023      	str	r3, [r4, #0]
 8002756:	bd38      	pop	{r3, r4, r5, pc}
 8002758:	20000284 	.word	0x20000284

0800275c <__errno>:
 800275c:	4b01      	ldr	r3, [pc, #4]	@ (8002764 <__errno+0x8>)
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	2000001c 	.word	0x2000001c

08002768 <__libc_init_array>:
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	2600      	movs	r6, #0
 800276c:	4d0c      	ldr	r5, [pc, #48]	@ (80027a0 <__libc_init_array+0x38>)
 800276e:	4c0d      	ldr	r4, [pc, #52]	@ (80027a4 <__libc_init_array+0x3c>)
 8002770:	1b64      	subs	r4, r4, r5
 8002772:	10a4      	asrs	r4, r4, #2
 8002774:	42a6      	cmp	r6, r4
 8002776:	d109      	bne.n	800278c <__libc_init_array+0x24>
 8002778:	f000 fd30 	bl	80031dc <_init>
 800277c:	2600      	movs	r6, #0
 800277e:	4d0a      	ldr	r5, [pc, #40]	@ (80027a8 <__libc_init_array+0x40>)
 8002780:	4c0a      	ldr	r4, [pc, #40]	@ (80027ac <__libc_init_array+0x44>)
 8002782:	1b64      	subs	r4, r4, r5
 8002784:	10a4      	asrs	r4, r4, #2
 8002786:	42a6      	cmp	r6, r4
 8002788:	d105      	bne.n	8002796 <__libc_init_array+0x2e>
 800278a:	bd70      	pop	{r4, r5, r6, pc}
 800278c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002790:	4798      	blx	r3
 8002792:	3601      	adds	r6, #1
 8002794:	e7ee      	b.n	8002774 <__libc_init_array+0xc>
 8002796:	f855 3b04 	ldr.w	r3, [r5], #4
 800279a:	4798      	blx	r3
 800279c:	3601      	adds	r6, #1
 800279e:	e7f2      	b.n	8002786 <__libc_init_array+0x1e>
 80027a0:	08003400 	.word	0x08003400
 80027a4:	08003400 	.word	0x08003400
 80027a8:	08003400 	.word	0x08003400
 80027ac:	08003404 	.word	0x08003404

080027b0 <__retarget_lock_init_recursive>:
 80027b0:	4770      	bx	lr

080027b2 <__retarget_lock_acquire_recursive>:
 80027b2:	4770      	bx	lr

080027b4 <__retarget_lock_release_recursive>:
 80027b4:	4770      	bx	lr
	...

080027b8 <_free_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4605      	mov	r5, r0
 80027bc:	2900      	cmp	r1, #0
 80027be:	d040      	beq.n	8002842 <_free_r+0x8a>
 80027c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027c4:	1f0c      	subs	r4, r1, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bfb8      	it	lt
 80027ca:	18e4      	addlt	r4, r4, r3
 80027cc:	f000 f8de 	bl	800298c <__malloc_lock>
 80027d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002844 <_free_r+0x8c>)
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	b933      	cbnz	r3, 80027e4 <_free_r+0x2c>
 80027d6:	6063      	str	r3, [r4, #4]
 80027d8:	6014      	str	r4, [r2, #0]
 80027da:	4628      	mov	r0, r5
 80027dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027e0:	f000 b8da 	b.w	8002998 <__malloc_unlock>
 80027e4:	42a3      	cmp	r3, r4
 80027e6:	d908      	bls.n	80027fa <_free_r+0x42>
 80027e8:	6820      	ldr	r0, [r4, #0]
 80027ea:	1821      	adds	r1, r4, r0
 80027ec:	428b      	cmp	r3, r1
 80027ee:	bf01      	itttt	eq
 80027f0:	6819      	ldreq	r1, [r3, #0]
 80027f2:	685b      	ldreq	r3, [r3, #4]
 80027f4:	1809      	addeq	r1, r1, r0
 80027f6:	6021      	streq	r1, [r4, #0]
 80027f8:	e7ed      	b.n	80027d6 <_free_r+0x1e>
 80027fa:	461a      	mov	r2, r3
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	b10b      	cbz	r3, 8002804 <_free_r+0x4c>
 8002800:	42a3      	cmp	r3, r4
 8002802:	d9fa      	bls.n	80027fa <_free_r+0x42>
 8002804:	6811      	ldr	r1, [r2, #0]
 8002806:	1850      	adds	r0, r2, r1
 8002808:	42a0      	cmp	r0, r4
 800280a:	d10b      	bne.n	8002824 <_free_r+0x6c>
 800280c:	6820      	ldr	r0, [r4, #0]
 800280e:	4401      	add	r1, r0
 8002810:	1850      	adds	r0, r2, r1
 8002812:	4283      	cmp	r3, r0
 8002814:	6011      	str	r1, [r2, #0]
 8002816:	d1e0      	bne.n	80027da <_free_r+0x22>
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4408      	add	r0, r1
 800281e:	6010      	str	r0, [r2, #0]
 8002820:	6053      	str	r3, [r2, #4]
 8002822:	e7da      	b.n	80027da <_free_r+0x22>
 8002824:	d902      	bls.n	800282c <_free_r+0x74>
 8002826:	230c      	movs	r3, #12
 8002828:	602b      	str	r3, [r5, #0]
 800282a:	e7d6      	b.n	80027da <_free_r+0x22>
 800282c:	6820      	ldr	r0, [r4, #0]
 800282e:	1821      	adds	r1, r4, r0
 8002830:	428b      	cmp	r3, r1
 8002832:	bf01      	itttt	eq
 8002834:	6819      	ldreq	r1, [r3, #0]
 8002836:	685b      	ldreq	r3, [r3, #4]
 8002838:	1809      	addeq	r1, r1, r0
 800283a:	6021      	streq	r1, [r4, #0]
 800283c:	6063      	str	r3, [r4, #4]
 800283e:	6054      	str	r4, [r2, #4]
 8002840:	e7cb      	b.n	80027da <_free_r+0x22>
 8002842:	bd38      	pop	{r3, r4, r5, pc}
 8002844:	20000290 	.word	0x20000290

08002848 <sbrk_aligned>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	4e0f      	ldr	r6, [pc, #60]	@ (8002888 <sbrk_aligned+0x40>)
 800284c:	460c      	mov	r4, r1
 800284e:	6831      	ldr	r1, [r6, #0]
 8002850:	4605      	mov	r5, r0
 8002852:	b911      	cbnz	r1, 800285a <sbrk_aligned+0x12>
 8002854:	f000 fca4 	bl	80031a0 <_sbrk_r>
 8002858:	6030      	str	r0, [r6, #0]
 800285a:	4621      	mov	r1, r4
 800285c:	4628      	mov	r0, r5
 800285e:	f000 fc9f 	bl	80031a0 <_sbrk_r>
 8002862:	1c43      	adds	r3, r0, #1
 8002864:	d103      	bne.n	800286e <sbrk_aligned+0x26>
 8002866:	f04f 34ff 	mov.w	r4, #4294967295
 800286a:	4620      	mov	r0, r4
 800286c:	bd70      	pop	{r4, r5, r6, pc}
 800286e:	1cc4      	adds	r4, r0, #3
 8002870:	f024 0403 	bic.w	r4, r4, #3
 8002874:	42a0      	cmp	r0, r4
 8002876:	d0f8      	beq.n	800286a <sbrk_aligned+0x22>
 8002878:	1a21      	subs	r1, r4, r0
 800287a:	4628      	mov	r0, r5
 800287c:	f000 fc90 	bl	80031a0 <_sbrk_r>
 8002880:	3001      	adds	r0, #1
 8002882:	d1f2      	bne.n	800286a <sbrk_aligned+0x22>
 8002884:	e7ef      	b.n	8002866 <sbrk_aligned+0x1e>
 8002886:	bf00      	nop
 8002888:	2000028c 	.word	0x2000028c

0800288c <_malloc_r>:
 800288c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002890:	1ccd      	adds	r5, r1, #3
 8002892:	f025 0503 	bic.w	r5, r5, #3
 8002896:	3508      	adds	r5, #8
 8002898:	2d0c      	cmp	r5, #12
 800289a:	bf38      	it	cc
 800289c:	250c      	movcc	r5, #12
 800289e:	2d00      	cmp	r5, #0
 80028a0:	4606      	mov	r6, r0
 80028a2:	db01      	blt.n	80028a8 <_malloc_r+0x1c>
 80028a4:	42a9      	cmp	r1, r5
 80028a6:	d904      	bls.n	80028b2 <_malloc_r+0x26>
 80028a8:	230c      	movs	r3, #12
 80028aa:	6033      	str	r3, [r6, #0]
 80028ac:	2000      	movs	r0, #0
 80028ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002988 <_malloc_r+0xfc>
 80028b6:	f000 f869 	bl	800298c <__malloc_lock>
 80028ba:	f8d8 3000 	ldr.w	r3, [r8]
 80028be:	461c      	mov	r4, r3
 80028c0:	bb44      	cbnz	r4, 8002914 <_malloc_r+0x88>
 80028c2:	4629      	mov	r1, r5
 80028c4:	4630      	mov	r0, r6
 80028c6:	f7ff ffbf 	bl	8002848 <sbrk_aligned>
 80028ca:	1c43      	adds	r3, r0, #1
 80028cc:	4604      	mov	r4, r0
 80028ce:	d158      	bne.n	8002982 <_malloc_r+0xf6>
 80028d0:	f8d8 4000 	ldr.w	r4, [r8]
 80028d4:	4627      	mov	r7, r4
 80028d6:	2f00      	cmp	r7, #0
 80028d8:	d143      	bne.n	8002962 <_malloc_r+0xd6>
 80028da:	2c00      	cmp	r4, #0
 80028dc:	d04b      	beq.n	8002976 <_malloc_r+0xea>
 80028de:	6823      	ldr	r3, [r4, #0]
 80028e0:	4639      	mov	r1, r7
 80028e2:	4630      	mov	r0, r6
 80028e4:	eb04 0903 	add.w	r9, r4, r3
 80028e8:	f000 fc5a 	bl	80031a0 <_sbrk_r>
 80028ec:	4581      	cmp	r9, r0
 80028ee:	d142      	bne.n	8002976 <_malloc_r+0xea>
 80028f0:	6821      	ldr	r1, [r4, #0]
 80028f2:	4630      	mov	r0, r6
 80028f4:	1a6d      	subs	r5, r5, r1
 80028f6:	4629      	mov	r1, r5
 80028f8:	f7ff ffa6 	bl	8002848 <sbrk_aligned>
 80028fc:	3001      	adds	r0, #1
 80028fe:	d03a      	beq.n	8002976 <_malloc_r+0xea>
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	442b      	add	r3, r5
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	f8d8 3000 	ldr.w	r3, [r8]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	bb62      	cbnz	r2, 8002968 <_malloc_r+0xdc>
 800290e:	f8c8 7000 	str.w	r7, [r8]
 8002912:	e00f      	b.n	8002934 <_malloc_r+0xa8>
 8002914:	6822      	ldr	r2, [r4, #0]
 8002916:	1b52      	subs	r2, r2, r5
 8002918:	d420      	bmi.n	800295c <_malloc_r+0xd0>
 800291a:	2a0b      	cmp	r2, #11
 800291c:	d917      	bls.n	800294e <_malloc_r+0xc2>
 800291e:	1961      	adds	r1, r4, r5
 8002920:	42a3      	cmp	r3, r4
 8002922:	6025      	str	r5, [r4, #0]
 8002924:	bf18      	it	ne
 8002926:	6059      	strne	r1, [r3, #4]
 8002928:	6863      	ldr	r3, [r4, #4]
 800292a:	bf08      	it	eq
 800292c:	f8c8 1000 	streq.w	r1, [r8]
 8002930:	5162      	str	r2, [r4, r5]
 8002932:	604b      	str	r3, [r1, #4]
 8002934:	4630      	mov	r0, r6
 8002936:	f000 f82f 	bl	8002998 <__malloc_unlock>
 800293a:	f104 000b 	add.w	r0, r4, #11
 800293e:	1d23      	adds	r3, r4, #4
 8002940:	f020 0007 	bic.w	r0, r0, #7
 8002944:	1ac2      	subs	r2, r0, r3
 8002946:	bf1c      	itt	ne
 8002948:	1a1b      	subne	r3, r3, r0
 800294a:	50a3      	strne	r3, [r4, r2]
 800294c:	e7af      	b.n	80028ae <_malloc_r+0x22>
 800294e:	6862      	ldr	r2, [r4, #4]
 8002950:	42a3      	cmp	r3, r4
 8002952:	bf0c      	ite	eq
 8002954:	f8c8 2000 	streq.w	r2, [r8]
 8002958:	605a      	strne	r2, [r3, #4]
 800295a:	e7eb      	b.n	8002934 <_malloc_r+0xa8>
 800295c:	4623      	mov	r3, r4
 800295e:	6864      	ldr	r4, [r4, #4]
 8002960:	e7ae      	b.n	80028c0 <_malloc_r+0x34>
 8002962:	463c      	mov	r4, r7
 8002964:	687f      	ldr	r7, [r7, #4]
 8002966:	e7b6      	b.n	80028d6 <_malloc_r+0x4a>
 8002968:	461a      	mov	r2, r3
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	42a3      	cmp	r3, r4
 800296e:	d1fb      	bne.n	8002968 <_malloc_r+0xdc>
 8002970:	2300      	movs	r3, #0
 8002972:	6053      	str	r3, [r2, #4]
 8002974:	e7de      	b.n	8002934 <_malloc_r+0xa8>
 8002976:	230c      	movs	r3, #12
 8002978:	4630      	mov	r0, r6
 800297a:	6033      	str	r3, [r6, #0]
 800297c:	f000 f80c 	bl	8002998 <__malloc_unlock>
 8002980:	e794      	b.n	80028ac <_malloc_r+0x20>
 8002982:	6005      	str	r5, [r0, #0]
 8002984:	e7d6      	b.n	8002934 <_malloc_r+0xa8>
 8002986:	bf00      	nop
 8002988:	20000290 	.word	0x20000290

0800298c <__malloc_lock>:
 800298c:	4801      	ldr	r0, [pc, #4]	@ (8002994 <__malloc_lock+0x8>)
 800298e:	f7ff bf10 	b.w	80027b2 <__retarget_lock_acquire_recursive>
 8002992:	bf00      	nop
 8002994:	20000288 	.word	0x20000288

08002998 <__malloc_unlock>:
 8002998:	4801      	ldr	r0, [pc, #4]	@ (80029a0 <__malloc_unlock+0x8>)
 800299a:	f7ff bf0b 	b.w	80027b4 <__retarget_lock_release_recursive>
 800299e:	bf00      	nop
 80029a0:	20000288 	.word	0x20000288

080029a4 <__sfputc_r>:
 80029a4:	6893      	ldr	r3, [r2, #8]
 80029a6:	b410      	push	{r4}
 80029a8:	3b01      	subs	r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	6093      	str	r3, [r2, #8]
 80029ae:	da07      	bge.n	80029c0 <__sfputc_r+0x1c>
 80029b0:	6994      	ldr	r4, [r2, #24]
 80029b2:	42a3      	cmp	r3, r4
 80029b4:	db01      	blt.n	80029ba <__sfputc_r+0x16>
 80029b6:	290a      	cmp	r1, #10
 80029b8:	d102      	bne.n	80029c0 <__sfputc_r+0x1c>
 80029ba:	bc10      	pop	{r4}
 80029bc:	f7ff bdeb 	b.w	8002596 <__swbuf_r>
 80029c0:	6813      	ldr	r3, [r2, #0]
 80029c2:	1c58      	adds	r0, r3, #1
 80029c4:	6010      	str	r0, [r2, #0]
 80029c6:	7019      	strb	r1, [r3, #0]
 80029c8:	4608      	mov	r0, r1
 80029ca:	bc10      	pop	{r4}
 80029cc:	4770      	bx	lr

080029ce <__sfputs_r>:
 80029ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d0:	4606      	mov	r6, r0
 80029d2:	460f      	mov	r7, r1
 80029d4:	4614      	mov	r4, r2
 80029d6:	18d5      	adds	r5, r2, r3
 80029d8:	42ac      	cmp	r4, r5
 80029da:	d101      	bne.n	80029e0 <__sfputs_r+0x12>
 80029dc:	2000      	movs	r0, #0
 80029de:	e007      	b.n	80029f0 <__sfputs_r+0x22>
 80029e0:	463a      	mov	r2, r7
 80029e2:	4630      	mov	r0, r6
 80029e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029e8:	f7ff ffdc 	bl	80029a4 <__sfputc_r>
 80029ec:	1c43      	adds	r3, r0, #1
 80029ee:	d1f3      	bne.n	80029d8 <__sfputs_r+0xa>
 80029f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080029f4 <_vfiprintf_r>:
 80029f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f8:	460d      	mov	r5, r1
 80029fa:	4614      	mov	r4, r2
 80029fc:	4698      	mov	r8, r3
 80029fe:	4606      	mov	r6, r0
 8002a00:	b09d      	sub	sp, #116	@ 0x74
 8002a02:	b118      	cbz	r0, 8002a0c <_vfiprintf_r+0x18>
 8002a04:	6a03      	ldr	r3, [r0, #32]
 8002a06:	b90b      	cbnz	r3, 8002a0c <_vfiprintf_r+0x18>
 8002a08:	f7ff fcdc 	bl	80023c4 <__sinit>
 8002a0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a0e:	07d9      	lsls	r1, r3, #31
 8002a10:	d405      	bmi.n	8002a1e <_vfiprintf_r+0x2a>
 8002a12:	89ab      	ldrh	r3, [r5, #12]
 8002a14:	059a      	lsls	r2, r3, #22
 8002a16:	d402      	bmi.n	8002a1e <_vfiprintf_r+0x2a>
 8002a18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a1a:	f7ff feca 	bl	80027b2 <__retarget_lock_acquire_recursive>
 8002a1e:	89ab      	ldrh	r3, [r5, #12]
 8002a20:	071b      	lsls	r3, r3, #28
 8002a22:	d501      	bpl.n	8002a28 <_vfiprintf_r+0x34>
 8002a24:	692b      	ldr	r3, [r5, #16]
 8002a26:	b99b      	cbnz	r3, 8002a50 <_vfiprintf_r+0x5c>
 8002a28:	4629      	mov	r1, r5
 8002a2a:	4630      	mov	r0, r6
 8002a2c:	f7ff fdf2 	bl	8002614 <__swsetup_r>
 8002a30:	b170      	cbz	r0, 8002a50 <_vfiprintf_r+0x5c>
 8002a32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a34:	07dc      	lsls	r4, r3, #31
 8002a36:	d504      	bpl.n	8002a42 <_vfiprintf_r+0x4e>
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	b01d      	add	sp, #116	@ 0x74
 8002a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a42:	89ab      	ldrh	r3, [r5, #12]
 8002a44:	0598      	lsls	r0, r3, #22
 8002a46:	d4f7      	bmi.n	8002a38 <_vfiprintf_r+0x44>
 8002a48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a4a:	f7ff feb3 	bl	80027b4 <__retarget_lock_release_recursive>
 8002a4e:	e7f3      	b.n	8002a38 <_vfiprintf_r+0x44>
 8002a50:	2300      	movs	r3, #0
 8002a52:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a54:	2320      	movs	r3, #32
 8002a56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a5a:	2330      	movs	r3, #48	@ 0x30
 8002a5c:	f04f 0901 	mov.w	r9, #1
 8002a60:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a64:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002c10 <_vfiprintf_r+0x21c>
 8002a68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	469a      	mov	sl, r3
 8002a70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a74:	b10a      	cbz	r2, 8002a7a <_vfiprintf_r+0x86>
 8002a76:	2a25      	cmp	r2, #37	@ 0x25
 8002a78:	d1f9      	bne.n	8002a6e <_vfiprintf_r+0x7a>
 8002a7a:	ebba 0b04 	subs.w	fp, sl, r4
 8002a7e:	d00b      	beq.n	8002a98 <_vfiprintf_r+0xa4>
 8002a80:	465b      	mov	r3, fp
 8002a82:	4622      	mov	r2, r4
 8002a84:	4629      	mov	r1, r5
 8002a86:	4630      	mov	r0, r6
 8002a88:	f7ff ffa1 	bl	80029ce <__sfputs_r>
 8002a8c:	3001      	adds	r0, #1
 8002a8e:	f000 80a7 	beq.w	8002be0 <_vfiprintf_r+0x1ec>
 8002a92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a94:	445a      	add	r2, fp
 8002a96:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a98:	f89a 3000 	ldrb.w	r3, [sl]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 809f 	beq.w	8002be0 <_vfiprintf_r+0x1ec>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002aac:	f10a 0a01 	add.w	sl, sl, #1
 8002ab0:	9304      	str	r3, [sp, #16]
 8002ab2:	9307      	str	r3, [sp, #28]
 8002ab4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ab8:	931a      	str	r3, [sp, #104]	@ 0x68
 8002aba:	4654      	mov	r4, sl
 8002abc:	2205      	movs	r2, #5
 8002abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ac2:	4853      	ldr	r0, [pc, #332]	@ (8002c10 <_vfiprintf_r+0x21c>)
 8002ac4:	f000 fb7c 	bl	80031c0 <memchr>
 8002ac8:	9a04      	ldr	r2, [sp, #16]
 8002aca:	b9d8      	cbnz	r0, 8002b04 <_vfiprintf_r+0x110>
 8002acc:	06d1      	lsls	r1, r2, #27
 8002ace:	bf44      	itt	mi
 8002ad0:	2320      	movmi	r3, #32
 8002ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ad6:	0713      	lsls	r3, r2, #28
 8002ad8:	bf44      	itt	mi
 8002ada:	232b      	movmi	r3, #43	@ 0x2b
 8002adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8002ae4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ae6:	d015      	beq.n	8002b14 <_vfiprintf_r+0x120>
 8002ae8:	4654      	mov	r4, sl
 8002aea:	2000      	movs	r0, #0
 8002aec:	f04f 0c0a 	mov.w	ip, #10
 8002af0:	9a07      	ldr	r2, [sp, #28]
 8002af2:	4621      	mov	r1, r4
 8002af4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002af8:	3b30      	subs	r3, #48	@ 0x30
 8002afa:	2b09      	cmp	r3, #9
 8002afc:	d94b      	bls.n	8002b96 <_vfiprintf_r+0x1a2>
 8002afe:	b1b0      	cbz	r0, 8002b2e <_vfiprintf_r+0x13a>
 8002b00:	9207      	str	r2, [sp, #28]
 8002b02:	e014      	b.n	8002b2e <_vfiprintf_r+0x13a>
 8002b04:	eba0 0308 	sub.w	r3, r0, r8
 8002b08:	fa09 f303 	lsl.w	r3, r9, r3
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	46a2      	mov	sl, r4
 8002b10:	9304      	str	r3, [sp, #16]
 8002b12:	e7d2      	b.n	8002aba <_vfiprintf_r+0xc6>
 8002b14:	9b03      	ldr	r3, [sp, #12]
 8002b16:	1d19      	adds	r1, r3, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	9103      	str	r1, [sp, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bfbb      	ittet	lt
 8002b20:	425b      	neglt	r3, r3
 8002b22:	f042 0202 	orrlt.w	r2, r2, #2
 8002b26:	9307      	strge	r3, [sp, #28]
 8002b28:	9307      	strlt	r3, [sp, #28]
 8002b2a:	bfb8      	it	lt
 8002b2c:	9204      	strlt	r2, [sp, #16]
 8002b2e:	7823      	ldrb	r3, [r4, #0]
 8002b30:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b32:	d10a      	bne.n	8002b4a <_vfiprintf_r+0x156>
 8002b34:	7863      	ldrb	r3, [r4, #1]
 8002b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b38:	d132      	bne.n	8002ba0 <_vfiprintf_r+0x1ac>
 8002b3a:	9b03      	ldr	r3, [sp, #12]
 8002b3c:	3402      	adds	r4, #2
 8002b3e:	1d1a      	adds	r2, r3, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	9203      	str	r2, [sp, #12]
 8002b44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b48:	9305      	str	r3, [sp, #20]
 8002b4a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002c14 <_vfiprintf_r+0x220>
 8002b4e:	2203      	movs	r2, #3
 8002b50:	4650      	mov	r0, sl
 8002b52:	7821      	ldrb	r1, [r4, #0]
 8002b54:	f000 fb34 	bl	80031c0 <memchr>
 8002b58:	b138      	cbz	r0, 8002b6a <_vfiprintf_r+0x176>
 8002b5a:	2240      	movs	r2, #64	@ 0x40
 8002b5c:	9b04      	ldr	r3, [sp, #16]
 8002b5e:	eba0 000a 	sub.w	r0, r0, sl
 8002b62:	4082      	lsls	r2, r0
 8002b64:	4313      	orrs	r3, r2
 8002b66:	3401      	adds	r4, #1
 8002b68:	9304      	str	r3, [sp, #16]
 8002b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b6e:	2206      	movs	r2, #6
 8002b70:	4829      	ldr	r0, [pc, #164]	@ (8002c18 <_vfiprintf_r+0x224>)
 8002b72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b76:	f000 fb23 	bl	80031c0 <memchr>
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	d03f      	beq.n	8002bfe <_vfiprintf_r+0x20a>
 8002b7e:	4b27      	ldr	r3, [pc, #156]	@ (8002c1c <_vfiprintf_r+0x228>)
 8002b80:	bb1b      	cbnz	r3, 8002bca <_vfiprintf_r+0x1d6>
 8002b82:	9b03      	ldr	r3, [sp, #12]
 8002b84:	3307      	adds	r3, #7
 8002b86:	f023 0307 	bic.w	r3, r3, #7
 8002b8a:	3308      	adds	r3, #8
 8002b8c:	9303      	str	r3, [sp, #12]
 8002b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b90:	443b      	add	r3, r7
 8002b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b94:	e76a      	b.n	8002a6c <_vfiprintf_r+0x78>
 8002b96:	460c      	mov	r4, r1
 8002b98:	2001      	movs	r0, #1
 8002b9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b9e:	e7a8      	b.n	8002af2 <_vfiprintf_r+0xfe>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f04f 0c0a 	mov.w	ip, #10
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	3401      	adds	r4, #1
 8002baa:	9305      	str	r3, [sp, #20]
 8002bac:	4620      	mov	r0, r4
 8002bae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bb2:	3a30      	subs	r2, #48	@ 0x30
 8002bb4:	2a09      	cmp	r2, #9
 8002bb6:	d903      	bls.n	8002bc0 <_vfiprintf_r+0x1cc>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0c6      	beq.n	8002b4a <_vfiprintf_r+0x156>
 8002bbc:	9105      	str	r1, [sp, #20]
 8002bbe:	e7c4      	b.n	8002b4a <_vfiprintf_r+0x156>
 8002bc0:	4604      	mov	r4, r0
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bc8:	e7f0      	b.n	8002bac <_vfiprintf_r+0x1b8>
 8002bca:	ab03      	add	r3, sp, #12
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	462a      	mov	r2, r5
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	4b13      	ldr	r3, [pc, #76]	@ (8002c20 <_vfiprintf_r+0x22c>)
 8002bd4:	a904      	add	r1, sp, #16
 8002bd6:	f3af 8000 	nop.w
 8002bda:	4607      	mov	r7, r0
 8002bdc:	1c78      	adds	r0, r7, #1
 8002bde:	d1d6      	bne.n	8002b8e <_vfiprintf_r+0x19a>
 8002be0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002be2:	07d9      	lsls	r1, r3, #31
 8002be4:	d405      	bmi.n	8002bf2 <_vfiprintf_r+0x1fe>
 8002be6:	89ab      	ldrh	r3, [r5, #12]
 8002be8:	059a      	lsls	r2, r3, #22
 8002bea:	d402      	bmi.n	8002bf2 <_vfiprintf_r+0x1fe>
 8002bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002bee:	f7ff fde1 	bl	80027b4 <__retarget_lock_release_recursive>
 8002bf2:	89ab      	ldrh	r3, [r5, #12]
 8002bf4:	065b      	lsls	r3, r3, #25
 8002bf6:	f53f af1f 	bmi.w	8002a38 <_vfiprintf_r+0x44>
 8002bfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002bfc:	e71e      	b.n	8002a3c <_vfiprintf_r+0x48>
 8002bfe:	ab03      	add	r3, sp, #12
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	462a      	mov	r2, r5
 8002c04:	4630      	mov	r0, r6
 8002c06:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <_vfiprintf_r+0x22c>)
 8002c08:	a904      	add	r1, sp, #16
 8002c0a:	f000 f87d 	bl	8002d08 <_printf_i>
 8002c0e:	e7e4      	b.n	8002bda <_vfiprintf_r+0x1e6>
 8002c10:	080033ca 	.word	0x080033ca
 8002c14:	080033d0 	.word	0x080033d0
 8002c18:	080033d4 	.word	0x080033d4
 8002c1c:	00000000 	.word	0x00000000
 8002c20:	080029cf 	.word	0x080029cf

08002c24 <_printf_common>:
 8002c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c28:	4616      	mov	r6, r2
 8002c2a:	4698      	mov	r8, r3
 8002c2c:	688a      	ldr	r2, [r1, #8]
 8002c2e:	690b      	ldr	r3, [r1, #16]
 8002c30:	4607      	mov	r7, r0
 8002c32:	4293      	cmp	r3, r2
 8002c34:	bfb8      	it	lt
 8002c36:	4613      	movlt	r3, r2
 8002c38:	6033      	str	r3, [r6, #0]
 8002c3a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c3e:	460c      	mov	r4, r1
 8002c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c44:	b10a      	cbz	r2, 8002c4a <_printf_common+0x26>
 8002c46:	3301      	adds	r3, #1
 8002c48:	6033      	str	r3, [r6, #0]
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	0699      	lsls	r1, r3, #26
 8002c4e:	bf42      	ittt	mi
 8002c50:	6833      	ldrmi	r3, [r6, #0]
 8002c52:	3302      	addmi	r3, #2
 8002c54:	6033      	strmi	r3, [r6, #0]
 8002c56:	6825      	ldr	r5, [r4, #0]
 8002c58:	f015 0506 	ands.w	r5, r5, #6
 8002c5c:	d106      	bne.n	8002c6c <_printf_common+0x48>
 8002c5e:	f104 0a19 	add.w	sl, r4, #25
 8002c62:	68e3      	ldr	r3, [r4, #12]
 8002c64:	6832      	ldr	r2, [r6, #0]
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	42ab      	cmp	r3, r5
 8002c6a:	dc2b      	bgt.n	8002cc4 <_printf_common+0xa0>
 8002c6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c70:	6822      	ldr	r2, [r4, #0]
 8002c72:	3b00      	subs	r3, #0
 8002c74:	bf18      	it	ne
 8002c76:	2301      	movne	r3, #1
 8002c78:	0692      	lsls	r2, r2, #26
 8002c7a:	d430      	bmi.n	8002cde <_printf_common+0xba>
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	4638      	mov	r0, r7
 8002c80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c84:	47c8      	blx	r9
 8002c86:	3001      	adds	r0, #1
 8002c88:	d023      	beq.n	8002cd2 <_printf_common+0xae>
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	6922      	ldr	r2, [r4, #16]
 8002c8e:	f003 0306 	and.w	r3, r3, #6
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	bf14      	ite	ne
 8002c96:	2500      	movne	r5, #0
 8002c98:	6833      	ldreq	r3, [r6, #0]
 8002c9a:	f04f 0600 	mov.w	r6, #0
 8002c9e:	bf08      	it	eq
 8002ca0:	68e5      	ldreq	r5, [r4, #12]
 8002ca2:	f104 041a 	add.w	r4, r4, #26
 8002ca6:	bf08      	it	eq
 8002ca8:	1aed      	subeq	r5, r5, r3
 8002caa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002cae:	bf08      	it	eq
 8002cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	bfc4      	itt	gt
 8002cb8:	1a9b      	subgt	r3, r3, r2
 8002cba:	18ed      	addgt	r5, r5, r3
 8002cbc:	42b5      	cmp	r5, r6
 8002cbe:	d11a      	bne.n	8002cf6 <_printf_common+0xd2>
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	e008      	b.n	8002cd6 <_printf_common+0xb2>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	4652      	mov	r2, sl
 8002cc8:	4641      	mov	r1, r8
 8002cca:	4638      	mov	r0, r7
 8002ccc:	47c8      	blx	r9
 8002cce:	3001      	adds	r0, #1
 8002cd0:	d103      	bne.n	8002cda <_printf_common+0xb6>
 8002cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cda:	3501      	adds	r5, #1
 8002cdc:	e7c1      	b.n	8002c62 <_printf_common+0x3e>
 8002cde:	2030      	movs	r0, #48	@ 0x30
 8002ce0:	18e1      	adds	r1, r4, r3
 8002ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002cec:	4422      	add	r2, r4
 8002cee:	3302      	adds	r3, #2
 8002cf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002cf4:	e7c2      	b.n	8002c7c <_printf_common+0x58>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	4622      	mov	r2, r4
 8002cfa:	4641      	mov	r1, r8
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	47c8      	blx	r9
 8002d00:	3001      	adds	r0, #1
 8002d02:	d0e6      	beq.n	8002cd2 <_printf_common+0xae>
 8002d04:	3601      	adds	r6, #1
 8002d06:	e7d9      	b.n	8002cbc <_printf_common+0x98>

08002d08 <_printf_i>:
 8002d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d0c:	7e0f      	ldrb	r7, [r1, #24]
 8002d0e:	4691      	mov	r9, r2
 8002d10:	2f78      	cmp	r7, #120	@ 0x78
 8002d12:	4680      	mov	r8, r0
 8002d14:	460c      	mov	r4, r1
 8002d16:	469a      	mov	sl, r3
 8002d18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d1e:	d807      	bhi.n	8002d30 <_printf_i+0x28>
 8002d20:	2f62      	cmp	r7, #98	@ 0x62
 8002d22:	d80a      	bhi.n	8002d3a <_printf_i+0x32>
 8002d24:	2f00      	cmp	r7, #0
 8002d26:	f000 80d3 	beq.w	8002ed0 <_printf_i+0x1c8>
 8002d2a:	2f58      	cmp	r7, #88	@ 0x58
 8002d2c:	f000 80ba 	beq.w	8002ea4 <_printf_i+0x19c>
 8002d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d38:	e03a      	b.n	8002db0 <_printf_i+0xa8>
 8002d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d3e:	2b15      	cmp	r3, #21
 8002d40:	d8f6      	bhi.n	8002d30 <_printf_i+0x28>
 8002d42:	a101      	add	r1, pc, #4	@ (adr r1, 8002d48 <_printf_i+0x40>)
 8002d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d48:	08002da1 	.word	0x08002da1
 8002d4c:	08002db5 	.word	0x08002db5
 8002d50:	08002d31 	.word	0x08002d31
 8002d54:	08002d31 	.word	0x08002d31
 8002d58:	08002d31 	.word	0x08002d31
 8002d5c:	08002d31 	.word	0x08002d31
 8002d60:	08002db5 	.word	0x08002db5
 8002d64:	08002d31 	.word	0x08002d31
 8002d68:	08002d31 	.word	0x08002d31
 8002d6c:	08002d31 	.word	0x08002d31
 8002d70:	08002d31 	.word	0x08002d31
 8002d74:	08002eb7 	.word	0x08002eb7
 8002d78:	08002ddf 	.word	0x08002ddf
 8002d7c:	08002e71 	.word	0x08002e71
 8002d80:	08002d31 	.word	0x08002d31
 8002d84:	08002d31 	.word	0x08002d31
 8002d88:	08002ed9 	.word	0x08002ed9
 8002d8c:	08002d31 	.word	0x08002d31
 8002d90:	08002ddf 	.word	0x08002ddf
 8002d94:	08002d31 	.word	0x08002d31
 8002d98:	08002d31 	.word	0x08002d31
 8002d9c:	08002e79 	.word	0x08002e79
 8002da0:	6833      	ldr	r3, [r6, #0]
 8002da2:	1d1a      	adds	r2, r3, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6032      	str	r2, [r6, #0]
 8002da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002db0:	2301      	movs	r3, #1
 8002db2:	e09e      	b.n	8002ef2 <_printf_i+0x1ea>
 8002db4:	6833      	ldr	r3, [r6, #0]
 8002db6:	6820      	ldr	r0, [r4, #0]
 8002db8:	1d19      	adds	r1, r3, #4
 8002dba:	6031      	str	r1, [r6, #0]
 8002dbc:	0606      	lsls	r6, r0, #24
 8002dbe:	d501      	bpl.n	8002dc4 <_printf_i+0xbc>
 8002dc0:	681d      	ldr	r5, [r3, #0]
 8002dc2:	e003      	b.n	8002dcc <_printf_i+0xc4>
 8002dc4:	0645      	lsls	r5, r0, #25
 8002dc6:	d5fb      	bpl.n	8002dc0 <_printf_i+0xb8>
 8002dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002dcc:	2d00      	cmp	r5, #0
 8002dce:	da03      	bge.n	8002dd8 <_printf_i+0xd0>
 8002dd0:	232d      	movs	r3, #45	@ 0x2d
 8002dd2:	426d      	negs	r5, r5
 8002dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002dd8:	230a      	movs	r3, #10
 8002dda:	4859      	ldr	r0, [pc, #356]	@ (8002f40 <_printf_i+0x238>)
 8002ddc:	e011      	b.n	8002e02 <_printf_i+0xfa>
 8002dde:	6821      	ldr	r1, [r4, #0]
 8002de0:	6833      	ldr	r3, [r6, #0]
 8002de2:	0608      	lsls	r0, r1, #24
 8002de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8002de8:	d402      	bmi.n	8002df0 <_printf_i+0xe8>
 8002dea:	0649      	lsls	r1, r1, #25
 8002dec:	bf48      	it	mi
 8002dee:	b2ad      	uxthmi	r5, r5
 8002df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8002df2:	6033      	str	r3, [r6, #0]
 8002df4:	bf14      	ite	ne
 8002df6:	230a      	movne	r3, #10
 8002df8:	2308      	moveq	r3, #8
 8002dfa:	4851      	ldr	r0, [pc, #324]	@ (8002f40 <_printf_i+0x238>)
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002e02:	6866      	ldr	r6, [r4, #4]
 8002e04:	2e00      	cmp	r6, #0
 8002e06:	bfa8      	it	ge
 8002e08:	6821      	ldrge	r1, [r4, #0]
 8002e0a:	60a6      	str	r6, [r4, #8]
 8002e0c:	bfa4      	itt	ge
 8002e0e:	f021 0104 	bicge.w	r1, r1, #4
 8002e12:	6021      	strge	r1, [r4, #0]
 8002e14:	b90d      	cbnz	r5, 8002e1a <_printf_i+0x112>
 8002e16:	2e00      	cmp	r6, #0
 8002e18:	d04b      	beq.n	8002eb2 <_printf_i+0x1aa>
 8002e1a:	4616      	mov	r6, r2
 8002e1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e20:	fb03 5711 	mls	r7, r3, r1, r5
 8002e24:	5dc7      	ldrb	r7, [r0, r7]
 8002e26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e2a:	462f      	mov	r7, r5
 8002e2c:	42bb      	cmp	r3, r7
 8002e2e:	460d      	mov	r5, r1
 8002e30:	d9f4      	bls.n	8002e1c <_printf_i+0x114>
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d10b      	bne.n	8002e4e <_printf_i+0x146>
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	07df      	lsls	r7, r3, #31
 8002e3a:	d508      	bpl.n	8002e4e <_printf_i+0x146>
 8002e3c:	6923      	ldr	r3, [r4, #16]
 8002e3e:	6861      	ldr	r1, [r4, #4]
 8002e40:	4299      	cmp	r1, r3
 8002e42:	bfde      	ittt	le
 8002e44:	2330      	movle	r3, #48	@ 0x30
 8002e46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e4e:	1b92      	subs	r2, r2, r6
 8002e50:	6122      	str	r2, [r4, #16]
 8002e52:	464b      	mov	r3, r9
 8002e54:	4621      	mov	r1, r4
 8002e56:	4640      	mov	r0, r8
 8002e58:	f8cd a000 	str.w	sl, [sp]
 8002e5c:	aa03      	add	r2, sp, #12
 8002e5e:	f7ff fee1 	bl	8002c24 <_printf_common>
 8002e62:	3001      	adds	r0, #1
 8002e64:	d14a      	bne.n	8002efc <_printf_i+0x1f4>
 8002e66:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6a:	b004      	add	sp, #16
 8002e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	f043 0320 	orr.w	r3, r3, #32
 8002e76:	6023      	str	r3, [r4, #0]
 8002e78:	2778      	movs	r7, #120	@ 0x78
 8002e7a:	4832      	ldr	r0, [pc, #200]	@ (8002f44 <_printf_i+0x23c>)
 8002e7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	6831      	ldr	r1, [r6, #0]
 8002e84:	061f      	lsls	r7, r3, #24
 8002e86:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e8a:	d402      	bmi.n	8002e92 <_printf_i+0x18a>
 8002e8c:	065f      	lsls	r7, r3, #25
 8002e8e:	bf48      	it	mi
 8002e90:	b2ad      	uxthmi	r5, r5
 8002e92:	6031      	str	r1, [r6, #0]
 8002e94:	07d9      	lsls	r1, r3, #31
 8002e96:	bf44      	itt	mi
 8002e98:	f043 0320 	orrmi.w	r3, r3, #32
 8002e9c:	6023      	strmi	r3, [r4, #0]
 8002e9e:	b11d      	cbz	r5, 8002ea8 <_printf_i+0x1a0>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	e7ab      	b.n	8002dfc <_printf_i+0xf4>
 8002ea4:	4826      	ldr	r0, [pc, #152]	@ (8002f40 <_printf_i+0x238>)
 8002ea6:	e7e9      	b.n	8002e7c <_printf_i+0x174>
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	f023 0320 	bic.w	r3, r3, #32
 8002eae:	6023      	str	r3, [r4, #0]
 8002eb0:	e7f6      	b.n	8002ea0 <_printf_i+0x198>
 8002eb2:	4616      	mov	r6, r2
 8002eb4:	e7bd      	b.n	8002e32 <_printf_i+0x12a>
 8002eb6:	6833      	ldr	r3, [r6, #0]
 8002eb8:	6825      	ldr	r5, [r4, #0]
 8002eba:	1d18      	adds	r0, r3, #4
 8002ebc:	6961      	ldr	r1, [r4, #20]
 8002ebe:	6030      	str	r0, [r6, #0]
 8002ec0:	062e      	lsls	r6, r5, #24
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	d501      	bpl.n	8002eca <_printf_i+0x1c2>
 8002ec6:	6019      	str	r1, [r3, #0]
 8002ec8:	e002      	b.n	8002ed0 <_printf_i+0x1c8>
 8002eca:	0668      	lsls	r0, r5, #25
 8002ecc:	d5fb      	bpl.n	8002ec6 <_printf_i+0x1be>
 8002ece:	8019      	strh	r1, [r3, #0]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	4616      	mov	r6, r2
 8002ed4:	6123      	str	r3, [r4, #16]
 8002ed6:	e7bc      	b.n	8002e52 <_printf_i+0x14a>
 8002ed8:	6833      	ldr	r3, [r6, #0]
 8002eda:	2100      	movs	r1, #0
 8002edc:	1d1a      	adds	r2, r3, #4
 8002ede:	6032      	str	r2, [r6, #0]
 8002ee0:	681e      	ldr	r6, [r3, #0]
 8002ee2:	6862      	ldr	r2, [r4, #4]
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	f000 f96b 	bl	80031c0 <memchr>
 8002eea:	b108      	cbz	r0, 8002ef0 <_printf_i+0x1e8>
 8002eec:	1b80      	subs	r0, r0, r6
 8002eee:	6060      	str	r0, [r4, #4]
 8002ef0:	6863      	ldr	r3, [r4, #4]
 8002ef2:	6123      	str	r3, [r4, #16]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002efa:	e7aa      	b.n	8002e52 <_printf_i+0x14a>
 8002efc:	4632      	mov	r2, r6
 8002efe:	4649      	mov	r1, r9
 8002f00:	4640      	mov	r0, r8
 8002f02:	6923      	ldr	r3, [r4, #16]
 8002f04:	47d0      	blx	sl
 8002f06:	3001      	adds	r0, #1
 8002f08:	d0ad      	beq.n	8002e66 <_printf_i+0x15e>
 8002f0a:	6823      	ldr	r3, [r4, #0]
 8002f0c:	079b      	lsls	r3, r3, #30
 8002f0e:	d413      	bmi.n	8002f38 <_printf_i+0x230>
 8002f10:	68e0      	ldr	r0, [r4, #12]
 8002f12:	9b03      	ldr	r3, [sp, #12]
 8002f14:	4298      	cmp	r0, r3
 8002f16:	bfb8      	it	lt
 8002f18:	4618      	movlt	r0, r3
 8002f1a:	e7a6      	b.n	8002e6a <_printf_i+0x162>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	4632      	mov	r2, r6
 8002f20:	4649      	mov	r1, r9
 8002f22:	4640      	mov	r0, r8
 8002f24:	47d0      	blx	sl
 8002f26:	3001      	adds	r0, #1
 8002f28:	d09d      	beq.n	8002e66 <_printf_i+0x15e>
 8002f2a:	3501      	adds	r5, #1
 8002f2c:	68e3      	ldr	r3, [r4, #12]
 8002f2e:	9903      	ldr	r1, [sp, #12]
 8002f30:	1a5b      	subs	r3, r3, r1
 8002f32:	42ab      	cmp	r3, r5
 8002f34:	dcf2      	bgt.n	8002f1c <_printf_i+0x214>
 8002f36:	e7eb      	b.n	8002f10 <_printf_i+0x208>
 8002f38:	2500      	movs	r5, #0
 8002f3a:	f104 0619 	add.w	r6, r4, #25
 8002f3e:	e7f5      	b.n	8002f2c <_printf_i+0x224>
 8002f40:	080033db 	.word	0x080033db
 8002f44:	080033ec 	.word	0x080033ec

08002f48 <__sflush_r>:
 8002f48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	0716      	lsls	r6, r2, #28
 8002f50:	4605      	mov	r5, r0
 8002f52:	460c      	mov	r4, r1
 8002f54:	d454      	bmi.n	8003000 <__sflush_r+0xb8>
 8002f56:	684b      	ldr	r3, [r1, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	dc02      	bgt.n	8002f62 <__sflush_r+0x1a>
 8002f5c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	dd48      	ble.n	8002ff4 <__sflush_r+0xac>
 8002f62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f64:	2e00      	cmp	r6, #0
 8002f66:	d045      	beq.n	8002ff4 <__sflush_r+0xac>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002f6e:	682f      	ldr	r7, [r5, #0]
 8002f70:	6a21      	ldr	r1, [r4, #32]
 8002f72:	602b      	str	r3, [r5, #0]
 8002f74:	d030      	beq.n	8002fd8 <__sflush_r+0x90>
 8002f76:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f78:	89a3      	ldrh	r3, [r4, #12]
 8002f7a:	0759      	lsls	r1, r3, #29
 8002f7c:	d505      	bpl.n	8002f8a <__sflush_r+0x42>
 8002f7e:	6863      	ldr	r3, [r4, #4]
 8002f80:	1ad2      	subs	r2, r2, r3
 8002f82:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002f84:	b10b      	cbz	r3, 8002f8a <__sflush_r+0x42>
 8002f86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f88:	1ad2      	subs	r2, r2, r3
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f90:	6a21      	ldr	r1, [r4, #32]
 8002f92:	47b0      	blx	r6
 8002f94:	1c43      	adds	r3, r0, #1
 8002f96:	89a3      	ldrh	r3, [r4, #12]
 8002f98:	d106      	bne.n	8002fa8 <__sflush_r+0x60>
 8002f9a:	6829      	ldr	r1, [r5, #0]
 8002f9c:	291d      	cmp	r1, #29
 8002f9e:	d82b      	bhi.n	8002ff8 <__sflush_r+0xb0>
 8002fa0:	4a28      	ldr	r2, [pc, #160]	@ (8003044 <__sflush_r+0xfc>)
 8002fa2:	410a      	asrs	r2, r1
 8002fa4:	07d6      	lsls	r6, r2, #31
 8002fa6:	d427      	bmi.n	8002ff8 <__sflush_r+0xb0>
 8002fa8:	2200      	movs	r2, #0
 8002faa:	6062      	str	r2, [r4, #4]
 8002fac:	6922      	ldr	r2, [r4, #16]
 8002fae:	04d9      	lsls	r1, r3, #19
 8002fb0:	6022      	str	r2, [r4, #0]
 8002fb2:	d504      	bpl.n	8002fbe <__sflush_r+0x76>
 8002fb4:	1c42      	adds	r2, r0, #1
 8002fb6:	d101      	bne.n	8002fbc <__sflush_r+0x74>
 8002fb8:	682b      	ldr	r3, [r5, #0]
 8002fba:	b903      	cbnz	r3, 8002fbe <__sflush_r+0x76>
 8002fbc:	6560      	str	r0, [r4, #84]	@ 0x54
 8002fbe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fc0:	602f      	str	r7, [r5, #0]
 8002fc2:	b1b9      	cbz	r1, 8002ff4 <__sflush_r+0xac>
 8002fc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fc8:	4299      	cmp	r1, r3
 8002fca:	d002      	beq.n	8002fd2 <__sflush_r+0x8a>
 8002fcc:	4628      	mov	r0, r5
 8002fce:	f7ff fbf3 	bl	80027b8 <_free_r>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fd6:	e00d      	b.n	8002ff4 <__sflush_r+0xac>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	4628      	mov	r0, r5
 8002fdc:	47b0      	blx	r6
 8002fde:	4602      	mov	r2, r0
 8002fe0:	1c50      	adds	r0, r2, #1
 8002fe2:	d1c9      	bne.n	8002f78 <__sflush_r+0x30>
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0c6      	beq.n	8002f78 <__sflush_r+0x30>
 8002fea:	2b1d      	cmp	r3, #29
 8002fec:	d001      	beq.n	8002ff2 <__sflush_r+0xaa>
 8002fee:	2b16      	cmp	r3, #22
 8002ff0:	d11d      	bne.n	800302e <__sflush_r+0xe6>
 8002ff2:	602f      	str	r7, [r5, #0]
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	e021      	b.n	800303c <__sflush_r+0xf4>
 8002ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	e01a      	b.n	8003036 <__sflush_r+0xee>
 8003000:	690f      	ldr	r7, [r1, #16]
 8003002:	2f00      	cmp	r7, #0
 8003004:	d0f6      	beq.n	8002ff4 <__sflush_r+0xac>
 8003006:	0793      	lsls	r3, r2, #30
 8003008:	bf18      	it	ne
 800300a:	2300      	movne	r3, #0
 800300c:	680e      	ldr	r6, [r1, #0]
 800300e:	bf08      	it	eq
 8003010:	694b      	ldreq	r3, [r1, #20]
 8003012:	1bf6      	subs	r6, r6, r7
 8003014:	600f      	str	r7, [r1, #0]
 8003016:	608b      	str	r3, [r1, #8]
 8003018:	2e00      	cmp	r6, #0
 800301a:	ddeb      	ble.n	8002ff4 <__sflush_r+0xac>
 800301c:	4633      	mov	r3, r6
 800301e:	463a      	mov	r2, r7
 8003020:	4628      	mov	r0, r5
 8003022:	6a21      	ldr	r1, [r4, #32]
 8003024:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003028:	47e0      	blx	ip
 800302a:	2800      	cmp	r0, #0
 800302c:	dc07      	bgt.n	800303e <__sflush_r+0xf6>
 800302e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003036:	f04f 30ff 	mov.w	r0, #4294967295
 800303a:	81a3      	strh	r3, [r4, #12]
 800303c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800303e:	4407      	add	r7, r0
 8003040:	1a36      	subs	r6, r6, r0
 8003042:	e7e9      	b.n	8003018 <__sflush_r+0xd0>
 8003044:	dfbffffe 	.word	0xdfbffffe

08003048 <_fflush_r>:
 8003048:	b538      	push	{r3, r4, r5, lr}
 800304a:	690b      	ldr	r3, [r1, #16]
 800304c:	4605      	mov	r5, r0
 800304e:	460c      	mov	r4, r1
 8003050:	b913      	cbnz	r3, 8003058 <_fflush_r+0x10>
 8003052:	2500      	movs	r5, #0
 8003054:	4628      	mov	r0, r5
 8003056:	bd38      	pop	{r3, r4, r5, pc}
 8003058:	b118      	cbz	r0, 8003062 <_fflush_r+0x1a>
 800305a:	6a03      	ldr	r3, [r0, #32]
 800305c:	b90b      	cbnz	r3, 8003062 <_fflush_r+0x1a>
 800305e:	f7ff f9b1 	bl	80023c4 <__sinit>
 8003062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f3      	beq.n	8003052 <_fflush_r+0xa>
 800306a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800306c:	07d0      	lsls	r0, r2, #31
 800306e:	d404      	bmi.n	800307a <_fflush_r+0x32>
 8003070:	0599      	lsls	r1, r3, #22
 8003072:	d402      	bmi.n	800307a <_fflush_r+0x32>
 8003074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003076:	f7ff fb9c 	bl	80027b2 <__retarget_lock_acquire_recursive>
 800307a:	4628      	mov	r0, r5
 800307c:	4621      	mov	r1, r4
 800307e:	f7ff ff63 	bl	8002f48 <__sflush_r>
 8003082:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003084:	4605      	mov	r5, r0
 8003086:	07da      	lsls	r2, r3, #31
 8003088:	d4e4      	bmi.n	8003054 <_fflush_r+0xc>
 800308a:	89a3      	ldrh	r3, [r4, #12]
 800308c:	059b      	lsls	r3, r3, #22
 800308e:	d4e1      	bmi.n	8003054 <_fflush_r+0xc>
 8003090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003092:	f7ff fb8f 	bl	80027b4 <__retarget_lock_release_recursive>
 8003096:	e7dd      	b.n	8003054 <_fflush_r+0xc>

08003098 <__swhatbuf_r>:
 8003098:	b570      	push	{r4, r5, r6, lr}
 800309a:	460c      	mov	r4, r1
 800309c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030a0:	4615      	mov	r5, r2
 80030a2:	2900      	cmp	r1, #0
 80030a4:	461e      	mov	r6, r3
 80030a6:	b096      	sub	sp, #88	@ 0x58
 80030a8:	da0c      	bge.n	80030c4 <__swhatbuf_r+0x2c>
 80030aa:	89a3      	ldrh	r3, [r4, #12]
 80030ac:	2100      	movs	r1, #0
 80030ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80030b2:	bf14      	ite	ne
 80030b4:	2340      	movne	r3, #64	@ 0x40
 80030b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80030ba:	2000      	movs	r0, #0
 80030bc:	6031      	str	r1, [r6, #0]
 80030be:	602b      	str	r3, [r5, #0]
 80030c0:	b016      	add	sp, #88	@ 0x58
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	466a      	mov	r2, sp
 80030c6:	f000 f849 	bl	800315c <_fstat_r>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	dbed      	blt.n	80030aa <__swhatbuf_r+0x12>
 80030ce:	9901      	ldr	r1, [sp, #4]
 80030d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80030d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80030d8:	4259      	negs	r1, r3
 80030da:	4159      	adcs	r1, r3
 80030dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030e0:	e7eb      	b.n	80030ba <__swhatbuf_r+0x22>

080030e2 <__smakebuf_r>:
 80030e2:	898b      	ldrh	r3, [r1, #12]
 80030e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030e6:	079d      	lsls	r5, r3, #30
 80030e8:	4606      	mov	r6, r0
 80030ea:	460c      	mov	r4, r1
 80030ec:	d507      	bpl.n	80030fe <__smakebuf_r+0x1c>
 80030ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80030f2:	6023      	str	r3, [r4, #0]
 80030f4:	6123      	str	r3, [r4, #16]
 80030f6:	2301      	movs	r3, #1
 80030f8:	6163      	str	r3, [r4, #20]
 80030fa:	b003      	add	sp, #12
 80030fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030fe:	466a      	mov	r2, sp
 8003100:	ab01      	add	r3, sp, #4
 8003102:	f7ff ffc9 	bl	8003098 <__swhatbuf_r>
 8003106:	9f00      	ldr	r7, [sp, #0]
 8003108:	4605      	mov	r5, r0
 800310a:	4639      	mov	r1, r7
 800310c:	4630      	mov	r0, r6
 800310e:	f7ff fbbd 	bl	800288c <_malloc_r>
 8003112:	b948      	cbnz	r0, 8003128 <__smakebuf_r+0x46>
 8003114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003118:	059a      	lsls	r2, r3, #22
 800311a:	d4ee      	bmi.n	80030fa <__smakebuf_r+0x18>
 800311c:	f023 0303 	bic.w	r3, r3, #3
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	81a3      	strh	r3, [r4, #12]
 8003126:	e7e2      	b.n	80030ee <__smakebuf_r+0xc>
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800312e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003132:	81a3      	strh	r3, [r4, #12]
 8003134:	9b01      	ldr	r3, [sp, #4]
 8003136:	6020      	str	r0, [r4, #0]
 8003138:	b15b      	cbz	r3, 8003152 <__smakebuf_r+0x70>
 800313a:	4630      	mov	r0, r6
 800313c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003140:	f000 f81e 	bl	8003180 <_isatty_r>
 8003144:	b128      	cbz	r0, 8003152 <__smakebuf_r+0x70>
 8003146:	89a3      	ldrh	r3, [r4, #12]
 8003148:	f023 0303 	bic.w	r3, r3, #3
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	81a3      	strh	r3, [r4, #12]
 8003152:	89a3      	ldrh	r3, [r4, #12]
 8003154:	431d      	orrs	r5, r3
 8003156:	81a5      	strh	r5, [r4, #12]
 8003158:	e7cf      	b.n	80030fa <__smakebuf_r+0x18>
	...

0800315c <_fstat_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	2300      	movs	r3, #0
 8003160:	4d06      	ldr	r5, [pc, #24]	@ (800317c <_fstat_r+0x20>)
 8003162:	4604      	mov	r4, r0
 8003164:	4608      	mov	r0, r1
 8003166:	4611      	mov	r1, r2
 8003168:	602b      	str	r3, [r5, #0]
 800316a:	f7fd fc2b 	bl	80009c4 <_fstat>
 800316e:	1c43      	adds	r3, r0, #1
 8003170:	d102      	bne.n	8003178 <_fstat_r+0x1c>
 8003172:	682b      	ldr	r3, [r5, #0]
 8003174:	b103      	cbz	r3, 8003178 <_fstat_r+0x1c>
 8003176:	6023      	str	r3, [r4, #0]
 8003178:	bd38      	pop	{r3, r4, r5, pc}
 800317a:	bf00      	nop
 800317c:	20000284 	.word	0x20000284

08003180 <_isatty_r>:
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	2300      	movs	r3, #0
 8003184:	4d05      	ldr	r5, [pc, #20]	@ (800319c <_isatty_r+0x1c>)
 8003186:	4604      	mov	r4, r0
 8003188:	4608      	mov	r0, r1
 800318a:	602b      	str	r3, [r5, #0]
 800318c:	f7fd fc29 	bl	80009e2 <_isatty>
 8003190:	1c43      	adds	r3, r0, #1
 8003192:	d102      	bne.n	800319a <_isatty_r+0x1a>
 8003194:	682b      	ldr	r3, [r5, #0]
 8003196:	b103      	cbz	r3, 800319a <_isatty_r+0x1a>
 8003198:	6023      	str	r3, [r4, #0]
 800319a:	bd38      	pop	{r3, r4, r5, pc}
 800319c:	20000284 	.word	0x20000284

080031a0 <_sbrk_r>:
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	2300      	movs	r3, #0
 80031a4:	4d05      	ldr	r5, [pc, #20]	@ (80031bc <_sbrk_r+0x1c>)
 80031a6:	4604      	mov	r4, r0
 80031a8:	4608      	mov	r0, r1
 80031aa:	602b      	str	r3, [r5, #0]
 80031ac:	f7fd fc30 	bl	8000a10 <_sbrk>
 80031b0:	1c43      	adds	r3, r0, #1
 80031b2:	d102      	bne.n	80031ba <_sbrk_r+0x1a>
 80031b4:	682b      	ldr	r3, [r5, #0]
 80031b6:	b103      	cbz	r3, 80031ba <_sbrk_r+0x1a>
 80031b8:	6023      	str	r3, [r4, #0]
 80031ba:	bd38      	pop	{r3, r4, r5, pc}
 80031bc:	20000284 	.word	0x20000284

080031c0 <memchr>:
 80031c0:	4603      	mov	r3, r0
 80031c2:	b510      	push	{r4, lr}
 80031c4:	b2c9      	uxtb	r1, r1
 80031c6:	4402      	add	r2, r0
 80031c8:	4293      	cmp	r3, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	d101      	bne.n	80031d2 <memchr+0x12>
 80031ce:	2000      	movs	r0, #0
 80031d0:	e003      	b.n	80031da <memchr+0x1a>
 80031d2:	7804      	ldrb	r4, [r0, #0]
 80031d4:	3301      	adds	r3, #1
 80031d6:	428c      	cmp	r4, r1
 80031d8:	d1f6      	bne.n	80031c8 <memchr+0x8>
 80031da:	bd10      	pop	{r4, pc}

080031dc <_init>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	bf00      	nop
 80031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e2:	bc08      	pop	{r3}
 80031e4:	469e      	mov	lr, r3
 80031e6:	4770      	bx	lr

080031e8 <_fini>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	bf00      	nop
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr
